{"file_contents":{"ARCHITECTURE.md":{"content":"# Application Architecture\n\n## Overview\n\nMadras Mini Golf is built as a **unified Node.js application** that serves both the React frontend and Express API from a single server process. This architecture simplifies deployment, reduces infrastructure complexity, and provides optimal performance.\n\n## Architecture Diagram\n\n```\n┌─────────────────────────────────────────────────────────┐\n│                Development Mode                         │\n├─────────────────────────────────────────────────────────┤\n│  Port 5000                                             │\n│  ┌──────────────────┐    ┌─────────────────────────────┐│\n│  │   Vite Dev       │    │      Express Server        ││\n│  │   Server         │◄──►│                             ││\n│  │                  │    │  ┌─────────────────────────┐││\n│  │  • React HMR     │    │  │     API Routes          │││\n│  │  • TypeScript    │    │  │   /api/*                │││\n│  │  • Tailwind      │    │  │                         │││\n│  │                  │    │  │  • Authentication       │││\n│  │                  │    │  │  • Database Operations  │││\n│  │                  │    │  │  • Business Logic       │││\n│  │                  │    │  └─────────────────────────┘││\n│  └──────────────────┘    └─────────────────────────────┘│\n└─────────────────────────────────────────────────────────┘\n\n┌─────────────────────────────────────────────────────────┐\n│                Production Mode                          │\n├─────────────────────────────────────────────────────────┤\n│  Port 5000                                             │\n│  ┌─────────────────────────────────────────────────────┐│\n│  │            Express Server                           ││\n│  │                                                     ││\n│  │  ┌─────────────────┐    ┌─────────────────────────┐ ││\n│  │  │  Static Files   │    │     API Routes          │ ││\n│  │  │  /dist/public/  │    │   /api/*                │ ││\n│  │  │                 │    │                         │ ││\n│  │  │  • index.html   │    │  • Authentication       │ ││\n│  │  │  • JS bundles   │    │  • Database Operations  │ ││\n│  │  │  • CSS assets   │    │  • Business Logic       │ ││\n│  │  │  • Images       │    │  • Session Management   │ ││\n│  │  └─────────────────┘    └─────────────────────────┘ ││\n│  └─────────────────────────────────────────────────────┘│\n└─────────────────────────────────────────────────────────┘\n```\n\n## Key Benefits\n\n### 1. **Simplified Deployment**\n- Single application to build and deploy\n- No need to coordinate separate frontend/backend deployments\n- Unified environment configuration\n- One domain, one SSL certificate\n\n### 2. **Development Experience**\n- Hot Module Replacement (HMR) for React components\n- TypeScript across entire stack\n- Shared types and schemas between frontend/backend\n- Single development server\n\n### 3. **Performance**\n- No CORS issues (same origin)\n- Reduced network requests\n- Optimized asset serving with caching headers\n- Bundle splitting for efficient loading\n\n### 4. **Hosting Flexibility**\n- Works on any Node.js hosting platform\n- Docker-ready with single container\n- VPS deployment with PM2\n- Serverless-compatible architecture\n\n## Technology Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for development and building\n- **Tailwind CSS** for styling\n- **shadcn/ui** component library\n- **TanStack Query** for state management\n- **Wouter** for routing\n- **React Hook Form + Zod** for form handling\n\n### Backend\n- **Express.js** for server framework\n- **TypeScript** for type safety\n- **Drizzle ORM** with PostgreSQL\n- **Session-based authentication** with bcrypt\n- **Automatic database detection** (Neon vs local)\n\n### Build System\n- **Vite** for frontend bundling\n- **ESBuild** for backend bundling\n- **TypeScript compiler** for type checking\n- **PostCSS** for CSS processing\n\n## Request Flow\n\n### Development Mode\n```\nBrowser Request → Express Server → Vite Middleware → React App\n              ↘ API Request → Express Routes → Database\n```\n\n### Production Mode\n```\nBrowser Request → Express Server → Static Files (Built React)\n              ↘ API Request → Express Routes → Database\n```\n\n## File Structure\n\n```\nmadras-mini-golf/\n├── client/                    # React frontend source\n│   ├── src/\n│   │   ├── components/       # Reusable UI components\n│   │   ├── pages/           # Route components\n│   │   ├── hooks/           # Custom React hooks\n│   │   └── lib/             # Utilities and configurations\n│   └── index.html           # HTML template\n├── server/                   # Express backend source\n│   ├── index.ts             # Main server file\n│   ├── routes.ts            # API route definitions\n│   ├── storage.ts           # Data access layer\n│   ├── db.ts                # Database configuration\n│   └── vite.ts              # Vite integration\n├── shared/                   # Shared TypeScript definitions\n│   └── schema.ts            # Database schemas and types\n├── scripts/                  # Build and deployment scripts\n├── dist/                     # Production build output\n│   ├── index.js             # Bundled server\n│   ├── public/              # Built frontend assets\n│   └── package.json         # Production dependencies\n└── Configuration files...\n```\n\n## Build Process\n\n### Development Build\n1. TypeScript compilation with hot reloading\n2. Vite dev server for React with HMR\n3. Express server with middleware integration\n4. Database connection with auto-detection\n\n### Production Build\n1. **Frontend Build** (`npm run build`)\n   - Vite builds React app to `dist/public/`\n   - Assets are optimized, minified, and hashed\n   - Bundle splitting for efficient loading\n\n2. **Backend Build**\n   - ESBuild bundles server code to `dist/index.js`\n   - Node.js modules are externalized\n   - TypeScript is compiled to JavaScript\n\n3. **Asset Optimization**\n   - Static assets get cache headers\n   - Gzip compression enabled\n   - Bundle analysis and optimization\n\n## Database Architecture\n\n### Connection Strategy\n```typescript\n// Auto-detection logic in server/db.ts\nif (DATABASE_URL.includes('neon') || NODE_ENV === 'production') {\n  // Use Neon serverless driver\n  neonConfig.webSocketConstructor = ws;\n  pool = new NeonPool({ connectionString: DATABASE_URL });\n  db = drizzleNeon({ client: pool, schema });\n} else {\n  // Use standard PostgreSQL driver for local development\n  pool = new NodePool({ connectionString: DATABASE_URL });\n  db = drizzleNode(pool, { schema });\n}\n```\n\n### Schema Management\n- **Drizzle ORM** for type-safe database operations\n- **Shared schemas** in `shared/schema.ts`\n- **Migration system** with Drizzle Kit\n- **Seed data** for initial setup\n\n## Security Architecture\n\n### Authentication Flow\n1. **Session-based authentication** with PostgreSQL storage\n2. **bcrypt** password hashing\n3. **CSRF protection** through SameSite cookies\n4. **Route-level protection** for admin endpoints\n\n### Session Management\n```typescript\napp.use(session({\n  store: new PgSession({ pool }),\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n```\n\n## Performance Optimizations\n\n### Asset Serving\n```typescript\n// Production static file serving with caching\napp.use(express.static(distPath, {\n  maxAge: '1y',                    // Long-term caching\n  etag: true,                      // ETag support\n  lastModified: true,              // Last-Modified headers\n  setHeaders: (res, filePath) => {\n    if (filePath.endsWith('.html')) {\n      res.setHeader('Cache-Control', 'no-cache');\n    } else if (filePath.match(/\\.(js|css|png|jpg)$/)) {\n      res.setHeader('Cache-Control', 'public, max-age=31536000');\n    }\n  }\n}));\n```\n\n### Bundle Optimization\n- **Code splitting** by route and vendor libraries\n- **Tree shaking** to remove unused code\n- **Minification** and compression\n- **Modern JavaScript** output with fallbacks\n\n## Deployment Strategies\n\n### Platform as a Service\n- **Heroku**: `git push heroku main`\n- **Railway**: Connect repo, auto-deploy\n- **Render**: Connect repo with build/start commands\n- **DigitalOcean App Platform**: YAML configuration\n\n### Container Deployment\n- **Docker**: Multi-stage build with production image\n- **Docker Compose**: Full stack with PostgreSQL\n- **Kubernetes**: Deployment manifests available\n\n### VPS Deployment\n- **PM2**: Process management and clustering\n- **Nginx**: Reverse proxy and SSL termination\n- **SystemD**: Service management\n\n## Monitoring and Maintenance\n\n### Health Checks\n```typescript\napp.get('/health', (req, res) => {\n  res.json({ \n    status: 'ok', \n    timestamp: new Date().toISOString(),\n    version: process.env.npm_package_version\n  });\n});\n```\n\n### Logging\n- **Request logging** for API endpoints\n- **Error tracking** with stack traces\n- **Performance monitoring** with response times\n- **Database query logging** in development\n\n### Database Maintenance\n- **Migration management** with Drizzle Kit\n- **Connection pooling** for performance\n- **Backup strategies** for data protection\n- **Performance monitoring** with query analysis\n\nThis architecture provides a robust, scalable foundation for the Madras Mini Golf application while maintaining simplicity in development and deployment processes.","size_bytes":11313},"DEPLOYMENT.md":{"content":"# Deployment Guide - Single Node.js Application\n\nThis project is configured as a **single deployable Node.js application** where the Express backend serves the built React frontend. This means you have just one application to deploy and manage.\n\n## Architecture Overview\n\n```\n┌─────────────────────────────────────────┐\n│              Single Node.js App         │\n├─────────────────────────────────────────┤\n│  Express Server (Port 5000)            │\n│  ├── API Routes (/api/*)               │\n│  ├── Static Files (Built React App)    │\n│  ├── Database Connection               │\n│  └── Session Management                │\n└─────────────────────────────────────────┘\n```\n\n## Building for Production\n\n### Option 1: Using Build Script (Recommended)\n```bash\n# Run the comprehensive build script\nchmod +x scripts/build-production.sh\n./scripts/build-production.sh\n```\n\n### Option 2: Manual Build\n```bash\n# Build frontend (creates dist/public/)\nnpm run build\n\n# Build backend (creates dist/index.js)\nnpx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist --target=node18\n\n# Copy necessary files\ncp -r shared dist/\ncp -r scripts dist/\ncp drizzle.config.ts dist/\ncp .env.example dist/\n```\n\n## Deployment Options\n\n### 1. Platform-as-a-Service (Easiest)\n\n#### Heroku\n```bash\n# Add to your project\necho 'web: npm start' > Procfile\n\n# Deploy\nheroku create your-mini-golf-app\nheroku addons:create heroku-postgresql:hobby-dev\nheroku config:set SESSION_SECRET=your_random_secret_here\nheroku config:set NODE_ENV=production\ngit add .\ngit commit -m \"Production build\"\ngit push heroku main\n\n# Run migrations\nheroku run npm run db:migrate\n```\n\n#### Railway (Recommended - See RAILWAY_DEPLOYMENT.md for detailed guide)\n1. Connect your GitHub repository to Railway\n2. Add PostgreSQL database service (automatic DATABASE_URL)\n3. Set environment variables:\n   - `NODE_ENV=production`\n   - `SESSION_SECRET=your_secure_random_secret`\n4. Railway auto-detects Node.js and runs `npm start`\n5. Initialize database: `railway run npm run db:push`\n6. Access your live app at the provided Railway domain\n\n**Complete step-by-step guide available in RAILWAY_DEPLOYMENT.md**\n\n#### Render\n1. Connect repository and select \"Web Service\"\n2. Build Command: `npm run build && npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist --target=node18`\n3. Start Command: `npm start`\n4. Add PostgreSQL database\n5. Set environment variables\n6. Deploy and run migrations\n\n#### DigitalOcean App Platform\n```yaml\n# .do/app.yaml\nname: madras-mini-golf\nservices:\n- name: web\n  source_dir: /\n  github:\n    repo: your-username/madras-mini-golf\n    branch: main\n  run_command: npm start\n  environment_slug: node-js\n  instance_count: 1\n  instance_size_slug: basic-xxs\n  env:\n  - key: NODE_ENV\n    value: production\n  - key: SESSION_SECRET\n    value: your_secret_here\ndatabases:\n- engine: PG\n  name: mini-golf-db\n  version: \"14\"\n```\n\n### 2. Virtual Private Server (VPS)\n\n#### Setup on Ubuntu/Debian\n```bash\n# On your server\nsudo apt update\nsudo apt install nodejs npm postgresql postgresql-contrib nginx\n\n# Create database\nsudo -u postgres createdb madras_mini_golf\nsudo -u postgres createuser --interactive mini_golf_user\n\n# Clone and build your app\ngit clone your-repo-url /var/www/madras-mini-golf\ncd /var/www/madras-mini-golf\n\n# Build application\nnpm install\n./scripts/build-production.sh\n\n# Move to production directory\nsudo mv dist /var/www/madras-mini-golf-prod\ncd /var/www/madras-mini-golf-prod\n\n# Install production dependencies\nnpm install --production\n\n# Create environment file\ncp .env.example .env\n# Edit .env with your production settings\n\n# Run migrations\nnpm run db:migrate\n\n# Start with PM2 (process manager)\nsudo npm install -g pm2\npm2 start index.js --name \"mini-golf\"\npm2 startup\npm2 save\n```\n\n#### Nginx Configuration (Optional Reverse Proxy)\n```nginx\n# /etc/nginx/sites-available/madras-mini-golf\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n### 3. Docker Deployment\n\n#### Using Docker Compose (Recommended)\n```bash\n# Build and start\ndocker-compose -f docker-compose.prod.yml up -d --build\n\n# Run migrations\ndocker-compose -f docker-compose.prod.yml exec app npm run db:migrate\n```\n\n#### Manual Docker Commands\n```bash\n# Build image\ndocker build -t madras-mini-golf .\n\n# Run with PostgreSQL\ndocker run -d --name mini-golf-db \\\n  -e POSTGRES_DB=madras_mini_golf \\\n  -e POSTGRES_USER=mini_golf_user \\\n  -e POSTGRES_PASSWORD=secure_password \\\n  postgres:14\n\n# Run app\ndocker run -d --name mini-golf-app \\\n  --link mini-golf-db:postgres \\\n  -e DATABASE_URL=postgresql://mini_golf_user:secure_password@postgres:5432/madras_mini_golf \\\n  -e NODE_ENV=production \\\n  -e SESSION_SECRET=your_secret \\\n  -p 5000:5000 \\\n  madras-mini-golf\n```\n\n## Environment Variables\n\nRequired for production:\n\n```env\n# Database\nDATABASE_URL=postgresql://user:password@host:port/database\nNODE_ENV=production\n\n# Security\nSESSION_SECRET=your_super_secret_session_key_minimum_32_characters\n\n# Optional\nPORT=5000\n```\n\n## Post-Deployment Checklist\n\n1. **Database Setup**\n   ```bash\n   npm run db:migrate  # Run migrations\n   ```\n\n2. **Health Check**\n   ```bash\n   curl https://your-domain.com/health\n   # Should return: {\"status\":\"ok\",\"timestamp\":\"2024-...\"}\n   ```\n\n3. **Admin Access**\n   - URL: `https://your-domain.com/admin`\n   - Default credentials: admin / admin123\n   - **Change immediately after first login!**\n\n4. **Test Core Features**\n   - Player registration\n   - Game creation and scoring\n   - Admin dashboard and analytics\n   - Pricing management\n\n## Monitoring and Maintenance\n\n### Logs\n```bash\n# PM2 logs\npm2 logs mini-golf\n\n# Docker logs\ndocker logs mini-golf-app\n\n# Heroku logs\nheroku logs --tail\n```\n\n### Database Backup\n```bash\n# Create backup\npg_dump $DATABASE_URL > backup-$(date +%Y%m%d).sql\n\n# Restore backup\npsql $DATABASE_URL < backup-20241201.sql\n```\n\n### Updates\n```bash\n# Pull latest changes\ngit pull origin main\n\n# Rebuild and restart\n./scripts/build-production.sh\npm2 restart mini-golf\n\n# Run new migrations if any\nnpm run db:migrate\n```\n\n## Performance Optimization\n\n### Production Optimizations Included\n- ✅ Static asset caching (1 year for JS/CSS/images)\n- ✅ Gzipped responses\n- ✅ Bundle splitting for faster loading\n- ✅ Database connection pooling\n- ✅ Session storage in PostgreSQL\n\n### Additional Recommendations\n- Use a CDN for global distribution\n- Set up SSL/TLS certificates (Let's Encrypt)\n- Configure database connection limits\n- Monitor memory usage and scale as needed\n- Set up automated backups\n- Configure log rotation\n\n## Troubleshooting\n\n### Common Issues\n\n**Build Fails**\n```bash\n# Clear cache and rebuild\nrm -rf node_modules dist\nnpm install\n./scripts/build-production.sh\n```\n\n**Database Connection Error**\n```bash\n# Test connection\npsql $DATABASE_URL -c \"SELECT version();\"\n\n# Check environment variables\necho $DATABASE_URL\n```\n\n**Static Files Not Serving**\n- Ensure `dist/public/` directory exists after build\n- Check file permissions\n- Verify NODE_ENV=production is set\n\n**Session Issues**\n- Verify SESSION_SECRET is set and consistent\n- Check PostgreSQL session table exists\n- Ensure database user has proper permissions\n\n## Scaling\n\n### Horizontal Scaling\n- Use load balancer (nginx, HAProxy, or cloud LB)\n- Enable sticky sessions or use Redis for session storage\n- Scale database with read replicas\n\n### Vertical Scaling\n- Monitor CPU/memory usage\n- Increase server resources as needed\n- Optimize database queries\n\nThis single-application deployment approach simplifies hosting, reduces infrastructure complexity, and provides a cohesive user experience with both the player interface and admin dashboard served from the same domain.","size_bytes":8487},"LOCAL_SETUP.md":{"content":"# Local Development Setup Guide\n\nFollow these steps to run the Madras Mini Golf application locally on your machine.\n\n## Application Architecture\n\nThis project is designed as a **single Node.js application** where:\n- In **development**: Vite dev server handles frontend, Express handles API\n- In **production**: Express serves both the built frontend and API endpoints\n- Frontend is bundled and served as static files from the backend\n- Single port deployment for simplified hosting\n\n## Prerequisites\n\n- Node.js 18 or higher\n- PostgreSQL 14 or higher\n- Git\n\n## Quick Setup\n\n### 1. Clone and Install\n```bash\ngit clone <your-repo-url>\ncd madras-mini-golf\nnpm install\n```\n\n### 2. Database Setup\n\n#### Option A: Local PostgreSQL\n```bash\n# Create database\ncreatedb madras_mini_golf\n\n# Create user (optional)\npsql -c \"CREATE USER mini_golf_user WITH PASSWORD 'your_password';\"\npsql -c \"GRANT ALL PRIVILEGES ON DATABASE madras_mini_golf TO mini_golf_user;\"\n```\n\n#### Option B: Docker PostgreSQL\n```bash\ndocker run --name madras-mini-golf-db \\\n  -e POSTGRES_DB=madras_mini_golf \\\n  -e POSTGRES_USER=mini_golf_user \\\n  -e POSTGRES_PASSWORD=your_password \\\n  -p 5432:5432 \\\n  -d postgres:14\n```\n\n### 3. Environment Configuration\n\nCopy `.env.example` to `.env` and update with your settings:\n\n```bash\ncp .env.example .env\n```\n\nUpdate `.env` file:\n```env\nDATABASE_URL=postgresql://mini_golf_user:your_password@localhost:5432/madras_mini_golf\nPGHOST=localhost\nPGPORT=5432\nPGUSER=mini_golf_user\nPGPASSWORD=your_password\nPGDATABASE=madras_mini_golf\nSESSION_SECRET=your_super_secret_session_key_here_make_it_long_and_random\nNODE_ENV=development\nPORT=5000\n```\n\n### 4. Database Migration and Seeding\n\n```bash\n# Run migrations to create tables\nnpx drizzle-kit migrate\n\n# Seed initial data (admin user and pricing)\npsql $DATABASE_URL -f scripts/seed.sql\n```\n\n### 5. Start Development Server\n\n```bash\nnpm run dev\n```\n\nAccess the application at: http://localhost:5000\n\n## Default Admin Credentials\n\n- Username: `admin`\n- Password: `admin123`\n\n**Important**: Change these credentials after first login!\n\n## Available Development Commands\n\nSince package.json cannot be modified in this environment, here are the commands you can run locally:\n\n```bash\n# Development\nnpm run dev                    # Start development server\nnpm run build                  # Build for production\nnpm run start                  # Start production server\n\n# Database (install drizzle-kit globally first: npm install -g drizzle-kit)\ndrizzle-kit generate          # Generate new migrations\ndrizzle-kit migrate           # Run migrations\ndrizzle-kit studio            # Open database GUI\ndrizzle-kit push              # Push schema changes directly\n\n# Manual database operations\npsql $DATABASE_URL -f scripts/seed.sql     # Seed database\npsql $DATABASE_URL -c \"DROP SCHEMA public CASCADE; CREATE SCHEMA public;\"  # Reset database\n```\n\n## Project Structure for Local Development\n\n```\nmadras-mini-golf/\n├── .env                      # Your local environment variables\n├── .env.example              # Template for environment variables\n├── README.md                 # Full project documentation\n├── LOCAL_SETUP.md           # This file\n├── scripts/\n│   ├── setup-local.js       # Local setup helper\n│   └── seed.sql             # Database seed data\n├── client/                  # Frontend React app\n├── server/                  # Backend Express app\n├── shared/                  # Shared types and schemas\n└── dist/                    # Production build output\n```\n\n## Local Development Tips\n\n### Development Architecture\n- **Single Port**: Everything runs on http://localhost:5000\n- **Frontend**: Vite dev server with HMR for React development\n- **Backend**: Express server handling API routes and serving static files\n- **Database**: PostgreSQL connection with auto-detection (Neon vs local)\n\n### Database Management\n- Use `npx drizzle-kit studio` for web-based database GUI\n- Check `server/db.ts` - auto-detects Neon vs local PostgreSQL\n- Migrations handled by Drizzle Kit\n\n### API Testing\n- All endpoints available at http://localhost:5000/api/*\n- Admin routes require session authentication\n- Health check: http://localhost:5000/health\n\n### Production Testing\nRun production build locally:\n```bash\nnpm run build\nNODE_ENV=production npm start\n# Or use: node production-test.js\n```\n\n## Troubleshooting\n\n### Database Connection Issues\n```bash\n# Test database connection\npsql $DATABASE_URL -c \"SELECT version();\"\n\n# Check if PostgreSQL is running\npg_ctl status\n```\n\n### Port Conflicts\nIf port 5000 is in use, change PORT in `.env`:\n```env\nPORT=3000\n```\n\n### Migration Issues\nReset database if migrations fail:\n```bash\npsql $DATABASE_URL -c \"DROP SCHEMA public CASCADE; CREATE SCHEMA public;\"\ndrizzle-kit migrate\npsql $DATABASE_URL -f scripts/seed.sql\n```\n\n### Build Issues\nClear cache and reinstall:\n```bash\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n## Production Deployment\n\nThe application builds into a **single deployable Node.js application**.\n\n### Build Process\n```bash\nnpm run build\n# Creates ./dist/ containing:\n# - index.js (unified Express server)\n# - public/ (built React frontend)  \n# - package.json (production dependencies only)\n# - All necessary runtime files\n```\n\n### Deployment Workflow\n```bash\n# 1. Build the application\nnpm run build\n\n# 2. Deploy the ./dist/ directory to your server\nscp -r dist/ user@server:/path/to/app/\n\n# 3. Install production dependencies\nssh user@server \"cd /path/to/app && npm install --production\"\n\n# 4. Set environment variables and start\nssh user@server \"cd /path/to/app && NODE_ENV=production npm start\"\n```\n\n### Platform Deployment\n\n#### Heroku (Zero Config)\n```bash\ngit push heroku main  # Automatically builds and deploys\n```\n\n#### Railway/Render/DigitalOcean\n1. Connect repository\n2. Build Command: `npm run build`\n3. Start Command: `npm start`\n4. Set environment variables\n5. Deploy automatically\n\n#### Docker\n```bash\ndocker-compose -f docker-compose.prod.yml up -d\n```\n\n### Environment Variables (Production)\n```env\nDATABASE_URL=postgresql://user:pass@host:port/db\nNODE_ENV=production\nSESSION_SECRET=your_secure_random_secret_minimum_32_chars\nPORT=5000  # Optional, defaults to 5000\n```\n\nSee [DEPLOYMENT.md](./DEPLOYMENT.md) for comprehensive deployment guides including VPS setup, Docker configuration, and platform-specific instructions.\n\n## Support\n\nFor issues or questions:\n1. Check this guide first\n2. Verify database connection and environment variables\n3. Check server logs for specific error messages\n4. Ensure all dependencies are installed\n\nThe application is designed to work seamlessly in local development with the same features available in the cloud environment.","size_bytes":6763},"RAILWAY_DEPLOYMENT.md":{"content":"# Railway Deployment Guide - Madras Mini Golf\n\nThis guide walks you through deploying your mini golf application to Railway with PostgreSQL database integration.\n\n## Prerequisites\n\n- GitHub account with your project repository\n- Railway account (sign up at railway.app)\n- Railway CLI installed (optional but recommended)\n\n## Step-by-Step Deployment\n\n### Step 1: Prepare Your Repository\n\n1. **Ensure your code is committed and pushed to GitHub:**\n   ```bash\n   git add .\n   git commit -m \"Ready for Railway deployment\"\n   git push origin main\n   ```\n\n2. **Verify your repository has these key files:**\n   - `package.json` with correct scripts\n   - `DEPLOYMENT.md` and this `RAILWAY_DEPLOYMENT.md`\n   - All source code properly committed\n\n### Step 2: Create Railway Project\n\n1. **Go to Railway Dashboard:**\n   - Visit [railway.app](https://railway.app)\n   - Sign in with your GitHub account\n\n2. **Create New Project:**\n   - Click \"New Project\"\n   - Select \"Deploy from GitHub repo\"\n   - Choose your mini golf repository\n   - Click \"Deploy Now\"\n\n3. **Railway will automatically:**\n   - Detect it's a Node.js project\n   - Run `npm install`\n   - Build using `npm run build`\n   - Start using `npm start`\n\n### Step 3: Add PostgreSQL Database\n\n1. **In your Railway project dashboard:**\n   - Click \"Add Service\" or the \"+\" button\n   - Select \"Database\"\n   - Choose \"PostgreSQL\"\n   - Railway will automatically provision the database\n\n2. **Database connection is automatic:**\n   - Railway provides `DATABASE_URL` environment variable\n   - Your app automatically detects and connects to Railway PostgreSQL\n   - No manual configuration needed\n\n### Step 4: Configure Environment Variables\n\n1. **In Railway project dashboard:**\n   - Go to your web service (not the database)\n   - Click \"Variables\" tab\n   - Add these environment variables:\n\n   ```\n   NODE_ENV=production\n   SESSION_SECRET=your_secure_random_secret_here\n   ```\n\n   **To generate a secure SESSION_SECRET:**\n   ```bash\n   node -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n   ```\n\n2. **DATABASE_URL is automatically set** by Railway when you add PostgreSQL\n\n### Step 5: Initialize Database Schema\n\n1. **Install Railway CLI (if not already installed):**\n   ```bash\n   npm install -g @railway/cli\n   ```\n\n2. **Login to Railway:**\n   ```bash\n   railway login\n   ```\n\n3. **Link to your project:**\n   ```bash\n   railway link\n   # Select your project from the list\n   ```\n\n4. **Push database schema:**\n   ```bash\n   railway run npm run db:push\n   ```\n\n   This command:\n   - Connects to your Railway PostgreSQL database\n   - Creates all necessary tables (users, players, games, scores, pricing)\n   - Sets up the complete database schema\n\n### Step 6: Verify Deployment\n\n1. **Check deployment status:**\n   - In Railway dashboard, view the \"Deployments\" tab\n   - Wait for build to complete (usually 2-3 minutes)\n   - Green checkmark indicates successful deployment\n\n2. **Access your live application:**\n   - Railway provides a public URL (like `https://your-app-name.railway.app`)\n   - Click the domain or copy the URL\n   - Test the complete flow: registration → gameplay → results\n\n3. **Test key features:**\n   - Player registration and game setup\n   - Score entry and hole progression\n   - Final results and sharing functionality\n   - Admin login and dashboard access\n\n### Step 7: Custom Domain (Optional)\n\n1. **In Railway project settings:**\n   - Go to \"Settings\" → \"Domains\"\n   - Add your custom domain\n   - Configure DNS records as instructed\n   - Railway provides automatic SSL certificates\n\n## Post-Deployment Configuration\n\n### Admin Account Setup\n\n1. **Access your live app's admin registration:**\n   - Visit `https://your-app.railway.app/admin-login`\n   - Create your admin account\n   - Set up initial pricing (weekday/weekend rates)\n\n### Database Management\n\n1. **View database directly in Railway:**\n   - Click on your PostgreSQL service\n   - Use the \"Query\" tab to run SQL commands\n   - Monitor database usage and performance\n\n2. **Backup considerations:**\n   - Railway automatically backs up your database\n   - Export data if needed for additional backups\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Build fails:**\n   - Check \"Deploy Logs\" in Railway dashboard\n   - Ensure all dependencies are in `package.json`\n   - Verify Node.js version compatibility\n\n2. **Database connection errors:**\n   - Confirm PostgreSQL service is running\n   - Check if `DATABASE_URL` is set in environment variables\n   - Verify schema was pushed successfully\n\n3. **Application not loading:**\n   - Check if `SESSION_SECRET` is set\n   - Review application logs in Railway dashboard\n   - Ensure port configuration is correct (app uses Railway's PORT)\n\n### Getting Help\n\n- Railway documentation: [docs.railway.app](https://docs.railway.app)\n- Railway Discord community for support\n- Check Railway status page for service issues\n\n## Monitoring and Maintenance\n\n### Performance Monitoring\n\n1. **Railway provides built-in metrics:**\n   - CPU and memory usage\n   - Request metrics and response times\n   - Database performance stats\n\n2. **Application logs:**\n   - Access real-time logs in Railway dashboard\n   - Monitor for errors or performance issues\n   - Set up log-based alerts if needed\n\n### Scaling\n\n1. **Automatic scaling:**\n   - Railway scales automatically based on traffic\n   - No manual configuration needed for basic scaling\n\n2. **Resource limits:**\n   - Monitor usage in Railway dashboard\n   - Upgrade plan if you exceed limits\n\n## Security Best Practices\n\n1. **Environment variables:**\n   - Keep `SESSION_SECRET` secure and random\n   - Never commit secrets to your repository\n   - Rotate secrets periodically\n\n2. **Database security:**\n   - Railway PostgreSQL is private by default\n   - Only your application can access the database\n   - Regular security updates handled by Railway\n\n## Cost Optimization\n\n1. **Monitor usage:**\n   - Check Railway billing dashboard monthly\n   - Optimize database queries if needed\n   - Consider upgrading plan for better performance\n\n2. **Development vs Production:**\n   - Use Railway for production\n   - Keep using local development environment\n   - This maintains cost efficiency\n\n---\n\n## Quick Reference Commands\n\n```bash\n# Build and test locally before deploying\nnpm run build\nnpm start\n\n# Deploy to Railway (after push to GitHub)\n# Railway automatically builds and deploys\n\n# Update database schema\nrailway run npm run db:push\n\n# View live logs\nrailway logs\n\n# Check deployment status\nrailway status\n```\n\nYour Madras Mini Golf application is now live on Railway with full database functionality!","size_bytes":6598},"README.md":{"content":"# Madras Mini Golf Management System\n\nA comprehensive mini golf management application featuring dual flows for players and administrators with robust data visualization and user experience features.\n\n## Features\n\n### Player Experience\n- QR code accessible landing page\n- Player registration system\n- 7-hole interactive gameplay with score tracking\n- Real-time results and leaderboards\n- Responsive mobile-first design\n\n### Admin Dashboard\n- Secure admin authentication\n- Sales analytics with multiple time periods\n- Pricing management (weekday/weekend rates)\n- Game history and player statistics\n- Revenue tracking and reporting\n\n## Tech Stack\n\n- **Frontend**: React 18, TypeScript, Tailwind CSS, shadcn/ui\n- **Backend**: Node.js, Express.js, TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Session-based with bcrypt\n- **Build Tool**: Vite\n- **Deployment**: Single Node.js application serving frontend and backend\n\n## Architecture\n\nThis application is built as a **single deployable Node.js application**:\n- The Express backend serves the built React frontend as static files\n- All API endpoints are served from the same domain/port\n- Production builds create a unified application for easy deployment\n- No separate frontend server required\n\n## Prerequisites\n\n- Node.js 18+ \n- PostgreSQL 14+\n- npm or yarn\n\n## Quick Start\n\n### Development Setup\n```bash\ngit clone <your-repo-url>\ncd madras-mini-golf\nnpm install\ncp .env.example .env\n# Edit .env with your database credentials\nnpm run dev\n```\n\n### Production Deployment (Railway - Recommended)\n```bash\n# See RAILWAY_DEPLOYMENT.md for complete step-by-step guide\n# 1. Push to GitHub\n# 2. Connect repository to Railway\n# 3. Add PostgreSQL database\n# 4. Set environment variables\n# 5. Deploy automatically\n```\n\n### Production Build (Local)\n```bash\nnpm run build                    # Build frontend and backend\n# Single deployable application created in ./dist/\n```\n\n## Deployment Options\n\n### Railway (Recommended)\nRailway provides the easiest deployment with integrated PostgreSQL:\n\n1. **Quick Deploy:** See `RAILWAY_DEPLOYMENT.md` for complete step-by-step guide\n2. **Zero Configuration:** Automatic Node.js detection and database integration\n3. **Built-in PostgreSQL:** Database service with automatic connection\n4. **Free Tier Available:** Perfect for testing and small-scale deployment\n\n### Other Platforms\n- **Heroku:** See `DEPLOYMENT.md` for Heroku-specific instructions\n- **Render:** Full deployment guide in `DEPLOYMENT.md`\n- **DigitalOcean App Platform:** Supported with minor configuration\n- **Vercel/Netlify:** Not recommended (require separate database hosting)\n\n## Local Development Setup\n\n### 1. Clone and Install\n```bash\ngit clone <your-repo-url>\ncd madras-mini-golf\nnpm install\n```\n\n### 2. Database Setup\n\n#### Option A: Local PostgreSQL\n```bash\n# Install PostgreSQL, then:\ncreatedb madras_mini_golf\ncreateuser -P mini_golf_user  # Set password when prompted\n```\n\n#### Option B: Docker (Recommended)\n```bash\ndocker-compose up -d postgres\n```\n\n### 3. Environment Configuration\n```bash\ncp .env.example .env\n# Edit .env with your database credentials\n```\n\n### 4. Database Setup and Start\n```bash\nnpx drizzle-kit migrate         # Create database tables\nnpm run dev                     # Start development server\n```\n\n**Development URLs:**\n- Application: http://localhost:5000 (unified frontend + API)\n- Admin: http://localhost:5000/admin (admin/admin123)\n\n## Production Deployment\n\n### Build Process\nThe application builds into a **single Node.js application**:\n```bash\nnpm run build\n# Creates ./dist/ with:\n# - index.js (Express server)\n# - public/ (built React frontend)\n# - All necessary files for deployment\n```\n\n### Deployment Options\n\n#### Platform as a Service (Easiest)\n```bash\n# Heroku\nheroku create your-app-name\nheroku addons:create heroku-postgresql\ngit push heroku main\n\n# Railway/Render/DigitalOcean\n# Connect repo, set environment variables, deploy\n```\n\n#### VPS/Docker\n```bash\n# Docker Compose\ndocker-compose -f docker-compose.prod.yml up -d\n\n# Manual VPS\nscp -r dist/ user@server:/path/to/app\nssh user@server \"cd /path/to/app && npm install --production && npm start\"\n```\n\nSee [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed deployment guides.\n\n## Available Scripts\n\n### Development\n- `npm run dev` - Start development server (Vite + Express)\n- `npm run build` - Build unified production application\n- `npm run start` - Start production server from build\n\n### Database\n- `npx drizzle-kit migrate` - Run database migrations\n- `npx drizzle-kit studio` - Open database GUI\n- `psql $DATABASE_URL -f scripts/seed.sql` - Seed initial data\n\n### Deployment\n- `./scripts/build-production.sh` - Complete production build\n- `node production-test.js` - Test production build locally\n\n## Project Structure\n\n```\n├── client/                 # React frontend (dev only)\n│   ├── src/\n│   │   ├── components/    # Reusable UI components\n│   │   ├── pages/         # Application pages\n│   │   ├── hooks/         # Custom React hooks\n│   │   └── lib/           # Utility functions\n├── server/                # Express backend\n│   ├── db.ts             # Database connection\n│   ├── routes.ts         # API routes\n│   ├── storage.ts        # Data access layer\n│   ├── index.ts          # Server entry point\n│   └── vite.ts           # Frontend/backend integration\n├── shared/               # Shared types and schemas\n├── scripts/              # Build and deployment scripts\n├── dist/                 # Production build output\n│   ├── index.js          # Built server (backend + static serving)\n│   ├── public/           # Built frontend assets\n│   └── package.json      # Production dependencies\n└── DEPLOYMENT.md         # Comprehensive deployment guide\n```\n\n### Development vs Production\n\n**Development Mode (`npm run dev`):**\n- Vite dev server serves React frontend with HMR\n- Express server handles API routes\n- Two processes, single port (5000)\n\n**Production Mode (`npm run build` + `npm start`):**\n- Single Express server serves everything\n- Built React app served as static files\n- One process, one port, easy deployment\n\n## Admin Access\n\nDefault admin credentials (change after first login):\n- Username: `admin`\n- Password: `admin123`\n\n## API Endpoints\n\n### Public Routes\n- `GET /` - Landing page\n- `POST /api/players` - Register new player\n- `POST /api/games` - Create new game\n- `GET /api/pricing` - Get current pricing\n\n### Admin Routes (Authentication Required)\n- `POST /api/admin/login` - Admin login\n- `GET /api/admin/dashboard-stats` - Dashboard statistics\n- `GET /api/admin/sales/*` - Sales analytics\n- `POST /api/admin/pricing` - Update pricing\n\n## Environment Variables\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `DATABASE_URL` | PostgreSQL connection string | Required |\n| `SESSION_SECRET` | Session encryption key | Required |\n| `NODE_ENV` | Environment mode | development |\n| `PORT` | Server port | 5000 |\n\n## Production Deployment\n\n### Database Setup\n1. Create production PostgreSQL database\n2. Run migrations: `npm run db:migrate`\n3. Seed initial data: `npm run db:seed`\n\n### Build and Deploy\n```bash\nnpm run build\nnpm start\n```\n\n## Troubleshooting\n\n### Database Connection Issues\n- Verify PostgreSQL is running\n- Check connection credentials in `.env`\n- Ensure database exists and user has permissions\n\n### Port Conflicts\n- Change `PORT` in `.env` if 5000 is in use\n- Update any hardcoded references\n\n### Migration Errors\n- Check database permissions\n- Verify schema changes don't conflict\n- Reset database if needed: `DROP DATABASE madras_mini_golf; CREATE DATABASE madras_mini_golf;`\n\n## Contributing\n\n1. Fork the repository\n2. Create feature branch: `git checkout -b feature/new-feature`\n3. Commit changes: `git commit -am 'Add new feature'`\n4. Push to branch: `git push origin feature/new-feature`\n5. Submit pull request\n\n## License\n\nThis project is licensed under the MIT License.","size_bytes":8075},"build.js":{"content":"#!/usr/bin/env node\n\n/**\n * Production build script for Madras Mini Golf\n * Builds both frontend and backend for single deployment\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nfunction log(message) {\n  console.log(`[BUILD] ${message}`);\n}\n\nfunction executeCommand(command, description) {\n  log(description);\n  try {\n    execSync(command, { stdio: 'inherit' });\n    log(`✅ ${description} completed`);\n  } catch (error) {\n    log(`❌ ${description} failed`);\n    process.exit(1);\n  }\n}\n\n// Clean previous build\nlog('🧹 Cleaning previous build...');\nif (fs.existsSync(path.join(__dirname, 'dist'))) {\n  fs.rmSync(path.join(__dirname, 'dist'), { recursive: true, force: true });\n}\n\n// Build frontend with Vite\nexecuteCommand('npx vite build', '🎨 Building frontend');\n\n// Build backend with esbuild\nexecuteCommand(\n  'npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist --target=node18',\n  '⚙️  Building backend'\n);\n\n// Copy necessary files for production\nlog('📦 Copying production files...');\n\n// Copy package.json with only production dependencies\nconst packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\nconst prodPackageJson = {\n  name: packageJson.name,\n  version: packageJson.version,\n  type: packageJson.type,\n  scripts: {\n    start: 'NODE_ENV=production node index.js'\n  },\n  dependencies: packageJson.dependencies\n};\n\nfs.writeFileSync(\n  path.join(__dirname, 'dist', 'package.json'), \n  JSON.stringify(prodPackageJson, null, 2)\n);\n\n// Copy additional files needed for deployment\nconst filesToCopy = [\n  'README.md',\n  '.env.example',\n  'drizzle.config.ts'\n];\n\nfilesToCopy.forEach(file => {\n  if (fs.existsSync(file)) {\n    fs.copyFileSync(file, path.join(__dirname, 'dist', file));\n    log(`📋 Copied ${file}`);\n  }\n});\n\n// Copy scripts directory\nif (fs.existsSync('scripts')) {\n  fs.cpSync('scripts', path.join(__dirname, 'dist', 'scripts'), { recursive: true });\n  log('📋 Copied scripts directory');\n}\n\n// Copy shared directory  \nif (fs.existsSync('shared')) {\n  fs.cpSync('shared', path.join(__dirname, 'dist', 'shared'), { recursive: true });\n  log('📋 Copied shared directory');\n}\n\nlog('✅ Build completed successfully!');\nlog('📁 Production files are in the ./dist directory');\nlog('🚀 To deploy: cd dist && npm install --production && npm start');","size_bytes":2500},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"production-test.js":{"content":"#!/usr/bin/env node\n\n/**\n * Test script to verify production build works correctly\n * This simulates how the app will run in production\n */\n\nimport express from 'express';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// Simulate production environment\nprocess.env.NODE_ENV = 'production';\n\nconsole.log('🧪 Testing Production Build');\nconsole.log('===========================');\n\n// Check if dist/public exists\nconst distPath = path.resolve(__dirname, 'dist', 'public');\nconst fs = await import('fs');\n\nif (!fs.existsSync(distPath)) {\n  console.error('❌ dist/public directory not found!');\n  console.log('   Please run: npm run build');\n  process.exit(1);\n}\n\nconsole.log('✅ Frontend build found at:', distPath);\n\n// List files in dist/public\nconst files = fs.readdirSync(distPath);\nconsole.log('📁 Built files:', files.join(', '));\n\n// Serve static files (same as production)\napp.use(express.static(distPath));\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\n});\n\n// Catch-all for React routing\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve(distPath, 'index.html'));\n});\n\napp.listen(PORT, () => {\n  console.log('');\n  console.log('🚀 Production test server running!');\n  console.log(`📱 Frontend: http://localhost:${PORT}`);\n  console.log(`🔍 Health Check: http://localhost:${PORT}/health`);\n  console.log('');\n  console.log('✅ This demonstrates how your app will work in production:');\n  console.log('   - Single Node.js server');\n  console.log('   - Frontend served as static files');\n  console.log('   - API endpoints on same domain');\n  console.log('');\n  console.log('Press Ctrl+C to stop');\n});","size_bytes":1842},"replit.md":{"content":"# Overview\n\nThis is a full-stack mini golf management system called \"Madras Mini Golf\" built as a single deployable Node.js application. The Express backend serves the built React frontend as static files, creating a unified application that simplifies deployment and hosting. The system provides a complete player experience for playing mini golf games and an administrative interface for managing pricing, sales analytics, and game data.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# Recent Changes (August 2025)\n\n## Single Deployable Application Architecture\n- **Date**: August 17, 2025\n- **Change**: Converted project from separate frontend/backend to unified Node.js application\n- **Impact**: Frontend now bundles and serves from Express backend for simplified deployment\n- **Benefits**: Single build process, unified hosting, easier deployment to any Node.js platform\n- **Files Created**: DEPLOYMENT.md, ARCHITECTURE.md, build scripts, Docker configs\n\n## Gameplay Interface Improvements\n- **Date**: August 21, 2025\n- **Change**: Simplified score input system by removing increment/decrement buttons\n- **Impact**: Cleaner mobile interface with manual input for scores 7+ \n- **Benefits**: Reduced interface complexity, better mobile experience, faster score entry\n- **Details**: Input box shows \"7+\" placeholder, accepts any number 1-20, compact total score display\n\n## Railway Deployment Documentation\n- **Date**: August 21, 2025\n- **Change**: Created comprehensive Railway deployment guide\n- **Impact**: Complete step-by-step instructions for production deployment\n- **Benefits**: Easy Railway deployment with PostgreSQL, automated build process\n- **Files Created**: RAILWAY_DEPLOYMENT.md with detailed deployment steps\n\n# System Architecture\n\n## Application Architecture\nThis is a **single deployable Node.js application** that serves both frontend and backend:\n\n### Development Mode\n- **Frontend**: Vite dev server with HMR serves React application\n- **Backend**: Express server handles API routes and middleware\n- **Integration**: Both run on single port (5000) with Vite middleware integration\n\n### Production Mode  \n- **Unified Server**: Express serves built React app as static files + API routes\n- **Static Assets**: Built frontend bundled into dist/public/ directory\n- **Single Process**: One Node.js process handles all requests\n- **Deployment**: Single application package for easy hosting\n\n## Frontend Architecture\nThe client-side application is built with React and TypeScript:\n\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom golf-themed color variables\n- **State Management**: React Query (TanStack Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod schema validation\n- **Animation**: Framer Motion for smooth UI transitions\n- **Build**: Vite bundles frontend into static assets served by Express\n\n## Backend Architecture\nExpress.js server with integrated frontend serving:\n\n- **API Layer**: RESTful routes with proper error handling and logging\n- **Static Serving**: Built React app served as static files in production\n- **Data Layer**: Abstracted storage interface with PostgreSQL implementation\n- **Session Management**: Express sessions with PostgreSQL storage\n- **Security**: bcrypt for password hashing and session-based authentication\n- **Database**: Auto-detection between Neon (cloud) and local PostgreSQL\n\n## Database Design\nUses PostgreSQL with Drizzle ORM for type-safe database operations:\n\n- **Schema Management**: Centralized schema definitions in shared directory for type consistency\n- **Relations**: Proper foreign key relationships between users, players, games, scores, and pricing\n- **Data Types**: Uses UUIDs for primary keys, decimal types for monetary values, and arrays for player names\n- **Migration Strategy**: Drizzle Kit for schema migrations and database versioning\n\nKey entities include users (admin), players, games, scores, and pricing history with proper relational integrity.\n\n## Development Environment\nConfigured for modern development with unified production deployment:\n\n- **Build System**: Vite for frontend development + production bundling\n- **Backend Build**: ESBuild for server bundling and optimization\n- **TypeScript**: Strict type checking across all code\n- **Path Mapping**: @ aliases for clean imports\n- **Hot Reload**: Vite HMR in development, static serving in production\n- **Single Port**: Development and production both use port 5000\n- **Unified Deployment**: Single Node.js application for hosting simplicity\n\n## Authentication & Authorization\nSimple but effective security model:\n\n- **Admin Authentication**: Session-based login for administrative functions\n- **Player Flow**: Registration-based system using sessionStorage for game continuity\n- **Route Protection**: Middleware-based route protection for admin endpoints\n- **Session Storage**: PostgreSQL-backed sessions for persistence and scalability\n\n## Game Flow Architecture\nDesigned for intuitive mini golf experience:\n\n- **Registration**: Player details capture with validation\n- **Game Setup**: Dynamic player count selection and name collection\n- **Scoring**: Hole-by-hole score tracking with validation\n- **Results**: Comprehensive score calculation and leaderboard display\n- **Pricing**: Dynamic weekend/weekday pricing with administrative controls\n\n## Analytics & Reporting\nComprehensive sales and performance tracking:\n\n- **Time-based Analytics**: Daily, weekly, monthly, and hourly sales breakdowns\n- **Revenue Tracking**: Automatic cost calculation based on player count and pricing\n- **Game Statistics**: Player counts, game completion tracking, and historical data\n- **Admin Dashboard**: Real-time metrics and trend visualization\n\n# External Dependencies\n\n## Database & ORM\n- **Neon Database**: PostgreSQL hosting with serverless architecture\n- **Drizzle ORM**: Type-safe database toolkit with schema management\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n## UI & Design System\n- **Radix UI**: Headless component primitives for accessibility\n- **shadcn/ui**: Pre-built component library with consistent design\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Framer Motion**: Animation library for smooth user interactions\n\n## Development Tools\n- **Vite**: Fast build tool with HMR and optimized production builds\n- **TypeScript**: Static type checking and enhanced developer experience\n- **React Query**: Server state management with caching and synchronization\n- **Zod**: Runtime type validation for forms and API data\n\n## Authentication & Security\n- **bcryptjs**: Password hashing for secure credential storage\n- **express-session**: Session management middleware\n- **React Hook Form**: Performant form handling with validation\n\n## Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **clsx**: Conditional className utility\n- **class-variance-authority**: Component variant management\n- **wouter**: Lightweight React router","size_bytes":7119},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/build-production.sh":{"content":"#!/bin/bash\n\n# Production Build Script for Madras Mini Golf\n# Creates a single deployable package with frontend bundled into backend\n\nset -e\n\necho \"🏌️ Building Madras Mini Golf for Production\"\necho \"==========================================\"\n\n# Check if we're in the right directory\nif [ ! -f \"package.json\" ]; then\n    echo \"❌ Error: package.json not found. Run this script from the project root.\"\n    exit 1\nfi\n\n# Clean previous build\necho \"🧹 Cleaning previous build...\"\nrm -rf dist/\n\n# Install dependencies if needed\nif [ ! -d \"node_modules\" ]; then\n    echo \"📦 Installing dependencies...\"\n    npm install\nfi\n\n# Build frontend with Vite\necho \"🎨 Building frontend...\"\nnpm run build\n\n# Build backend\necho \"⚙️ Building backend...\"\nnpx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist --target=node18\n\n# Copy server files that aren't bundled\necho \"📋 Copying additional server files...\"\ncp -r server/routes.ts dist/ 2>/dev/null || true\ncp -r server/storage.ts dist/ 2>/dev/null || true\ncp -r server/db.ts dist/ 2>/dev/null || true\ncp -r server/vite.ts dist/ 2>/dev/null || true\n\n# Create production package.json\necho \"📝 Creating production package.json...\"\ncat > dist/package.json << 'EOF'\n{\n  \"name\": \"madras-mini-golf\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"NODE_ENV=production node index.js\",\n    \"db:migrate\": \"drizzle-kit migrate\"\n  },\n  \"dependencies\": {\n    \"@neondatabase/serverless\": \"^0.10.4\",\n    \"bcryptjs\": \"^3.0.2\",\n    \"connect-pg-simple\": \"^10.0.0\",\n    \"drizzle-orm\": \"^0.39.1\",\n    \"drizzle-zod\": \"^0.7.0\",\n    \"express\": \"^4.21.2\",\n    \"express-session\": \"^1.18.1\",\n    \"nanoid\": \"^5.0.9\",\n    \"passport\": \"^0.7.0\",\n    \"passport-local\": \"^1.0.0\",\n    \"pg\": \"^8.13.1\",\n    \"ws\": \"^8.18.0\",\n    \"zod\": \"^3.23.8\"\n  }\n}\nEOF\n\n# Copy necessary files for deployment\necho \"📋 Copying deployment files...\"\ncp .env.example dist/ 2>/dev/null || true\ncp README.md dist/ 2>/dev/null || true\ncp LOCAL_SETUP.md dist/ 2>/dev/null || true\ncp drizzle.config.ts dist/ 2>/dev/null || true\n\n# Copy shared directory (contains schemas)\nif [ -d \"shared\" ]; then\n    cp -r shared dist/\nfi\n\n# Copy scripts for database operations\nif [ -d \"scripts\" ]; then\n    cp -r scripts dist/\nfi\n\n# Copy drizzle migrations if they exist\nif [ -d \"drizzle\" ]; then\n    cp -r drizzle dist/\nfi\n\necho \"\"\necho \"✅ Production build completed successfully!\"\necho \"\"\necho \"📁 Build output location: ./dist/\"\necho \"📦 Frontend assets: ./dist/public/\"\necho \"⚙️ Backend entry point: ./dist/index.js\"\necho \"\"\necho \"🚀 Deployment instructions:\"\necho \"1. Copy the ./dist/ directory to your server\"\necho \"2. cd dist && npm install --production\"\necho \"3. Set up environment variables (.env file)\"\necho \"4. Run database migrations: npm run db:migrate\"\necho \"5. Start the application: npm start\"\necho \"\"\necho \"🌐 The application will serve both API and frontend on a single port\"","size_bytes":2961},"scripts/local-dev.sh":{"content":"#!/bin/bash\n\n# Madras Mini Golf - Local Development Setup Script\n# This script helps set up the project for local development\n\nset -e\n\necho \"🏌️ Madras Mini Golf - Local Development Setup\"\necho \"=============================================\"\n\n# Check if Node.js is installed\nif ! command -v node &> /dev/null; then\n    echo \"❌ Node.js is not installed. Please install Node.js 18+ first.\"\n    exit 1\nfi\n\nNODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)\nif [ \"$NODE_VERSION\" -lt 18 ]; then\n    echo \"⚠️  Warning: Node.js version is $NODE_VERSION. Recommended: 18+\"\nfi\n\necho \"✅ Node.js version: $(node -v)\"\n\n# Check if PostgreSQL is available\nif ! command -v psql &> /dev/null; then\n    echo \"⚠️  PostgreSQL CLI not found. Installing PostgreSQL is recommended.\"\n    echo \"   Alternative: Use Docker with 'docker-compose up -d postgres'\"\nelse\n    echo \"✅ PostgreSQL CLI available\"\nfi\n\n# Create .env file if it doesn't exist\nif [ ! -f .env ]; then\n    echo \"📝 Creating .env file from template...\"\n    cp .env.example .env\n    echo \"✅ .env file created!\"\n    echo \"📝 Please update .env with your database credentials before continuing.\"\nelse\n    echo \"✅ .env file already exists\"\nfi\n\n# Install dependencies\necho \"📦 Installing dependencies...\"\nnpm install\n\n# Check if database connection works\necho \"🔍 Testing database connection...\"\nif [ -f .env ]; then\n    source .env\n    if [ -n \"$DATABASE_URL\" ]; then\n        if psql \"$DATABASE_URL\" -c \"SELECT version();\" &> /dev/null; then\n            echo \"✅ Database connection successful\"\n            \n            # Run migrations\n            echo \"🗃️  Running database migrations...\"\n            npx drizzle-kit migrate\n            \n            # Seed database\n            echo \"🌱 Seeding database with initial data...\"\n            psql \"$DATABASE_URL\" -f scripts/seed.sql\n            \n            echo \"✅ Database setup complete!\"\n        else\n            echo \"❌ Database connection failed. Please check your DATABASE_URL in .env\"\n            echo \"   To create a local database: createdb madras_mini_golf\"\n        fi\n    else\n        echo \"⚠️  DATABASE_URL not set in .env file\"\n    fi\nfi\n\necho \"\"\necho \"🚀 Setup complete! Next steps:\"\necho \"1. Update .env with your database credentials (if not done)\"\necho \"2. Run 'npm run dev' to start the development server\"\necho \"3. Access the app at http://localhost:5000\"\necho \"\"\necho \"Default admin credentials:\"\necho \"- Username: admin\"\necho \"- Password: admin123\"\necho \"\"\necho \"For Docker setup: docker-compose up -d\"\necho \"For more details, see LOCAL_SETUP.md\"","size_bytes":2607},"scripts/reset-db.sh":{"content":"#!/bin/bash\n\n# Reset database script for local development\n# Use with caution - this will delete all data!\n\nset -e\n\necho \"⚠️  WARNING: This will delete ALL data in your database!\"\necho \"This should only be used in development.\"\nread -p \"Are you sure you want to continue? (y/N): \" -n 1 -r\necho\n\nif [[ ! $REPLY =~ ^[Yy]$ ]]; then\n    echo \"Operation cancelled.\"\n    exit 0\nfi\n\n# Load environment variables\nif [ -f .env ]; then\n    source .env\nelse\n    echo \"❌ .env file not found!\"\n    exit 1\nfi\n\nif [ -z \"$DATABASE_URL\" ]; then\n    echo \"❌ DATABASE_URL not set in .env file\"\n    exit 1\nfi\n\necho \"🗑️  Dropping and recreating database schema...\"\npsql \"$DATABASE_URL\" -c \"DROP SCHEMA public CASCADE; CREATE SCHEMA public;\"\n\necho \"🗃️  Running migrations...\"\nnpx drizzle-kit migrate\n\necho \"🌱 Seeding database...\"\npsql \"$DATABASE_URL\" -f scripts/seed.sql\n\necho \"✅ Database reset complete!\"\necho \"\"\necho \"Default admin credentials:\"\necho \"- Username: admin\"\necho \"- Password: admin123\"","size_bytes":1001},"scripts/setup-local.js":{"content":"#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\nconsole.log('🏌️ Setting up Madras Mini Golf for local development...\\n');\n\n// Check if .env exists\nconst envPath = path.join(__dirname, '..', '.env');\nconst envExamplePath = path.join(__dirname, '..', '.env.example');\n\nif (!fs.existsSync(envPath)) {\n  console.log('📝 Creating .env file from .env.example...');\n  fs.copyFileSync(envExamplePath, envPath);\n  console.log('✅ .env file created! Please update it with your database credentials.\\n');\n} else {\n  console.log('✅ .env file already exists.\\n');\n}\n\n// Check Node.js version\nconst nodeVersion = process.version;\nconst majorVersion = parseInt(nodeVersion.split('.')[0].substring(1));\n\nif (majorVersion < 18) {\n  console.log('⚠️  Warning: Node.js 18+ is recommended. Current version:', nodeVersion);\n} else {\n  console.log('✅ Node.js version:', nodeVersion);\n}\n\n// Check if PostgreSQL is available (basic check)\ntry {\n  execSync('psql --version', { stdio: 'ignore' });\n  console.log('✅ PostgreSQL CLI available');\n} catch (error) {\n  console.log('⚠️  PostgreSQL CLI not found. Make sure PostgreSQL is installed.');\n}\n\nconsole.log('\\n🚀 Setup complete! Next steps:');\nconsole.log('1. Update .env file with your database credentials');\nconsole.log('2. Create PostgreSQL database: createdb madras_mini_golf');\nconsole.log('3. Run migrations: npm run db:migrate');\nconsole.log('4. Start development server: npm run dev');\nconsole.log('\\nFor detailed instructions, see README.md');","size_bytes":1579},"server/db.ts":{"content":"import { Pool as NeonPool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle as drizzleNeon } from 'drizzle-orm/neon-serverless';\nimport { drizzle as drizzleNode } from 'drizzle-orm/node-postgres';\nimport { Pool as NodePool } from 'pg';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Detect if we're using Neon or local PostgreSQL\nconst isNeonDatabase = process.env.DATABASE_URL.includes('neon.tech') || \n                      process.env.DATABASE_URL.includes('neon.database') ||\n                      process.env.NODE_ENV === 'production';\n\nlet pool: NeonPool | NodePool;\nlet db: ReturnType<typeof drizzleNeon> | ReturnType<typeof drizzleNode>;\n\nif (isNeonDatabase) {\n  // Neon serverless configuration\n  neonConfig.webSocketConstructor = ws;\n  pool = new NeonPool({ connectionString: process.env.DATABASE_URL });\n  db = drizzleNeon({ client: pool, schema });\n} else {\n  // Local PostgreSQL configuration\n  pool = new NodePool({ connectionString: process.env.DATABASE_URL });\n  db = drizzleNode(pool, { schema });\n}\n\nexport { pool, db };","size_bytes":1205},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // serve static built files\n  serveStatic(app);\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1829},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcryptjs\";\nimport { insertPlayerSchema, insertScoreSchema, insertPricingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport session from \"express-session\";\nimport ConnectPgSimple from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\n// Custom game creation schema without totalCost\nconst createGameSchema = z.object({\n  playerId: z.string(),\n  playerNames: z.array(z.string()).min(1),\n  playerCount: z.number().int().min(1).max(8),\n  isWeekend: z.boolean(),\n});\n\n// Session user type\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup session middleware\n  const PgSession = ConnectPgSimple(session);\n  \n  app.use(session({\n    store: new PgSession({\n      pool: pool,\n      tableName: 'session',\n    }),\n    secret: process.env.SESSION_SECRET || 'your-secret-key-here',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n    },\n  }));\n\n  // Initialize default admin user and pricing if not exists\n  const initializeDefaults = async () => {\n    try {\n      const adminUser = await storage.getUserByUsername(\"admin\");\n      if (!adminUser) {\n        const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n        await storage.createUser({\n          username: \"admin\",\n          password: hashedPassword,\n        });\n      }\n\n      const currentPricing = await storage.getCurrentPricing();\n      if (!currentPricing) {\n        const admin = await storage.getUserByUsername(\"admin\");\n        if (admin) {\n          await storage.createPricing({\n            weekdayPrice: \"60.00\",\n            weekendPrice: \"80.00\",\n            updatedBy: admin.id,\n          });\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing defaults:\", error);\n    }\n  };\n\n  await initializeDefaults();\n\n  // Auth middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  // Player registration\n  app.post(\"/api/players\", async (req, res) => {\n    try {\n      const playerData = insertPlayerSchema.parse(req.body);\n      const player = await storage.createPlayer(playerData);\n      res.json(player);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Create game\n  app.post(\"/api/games\", async (req, res) => {\n    try {\n      const gameData = createGameSchema.parse(req.body);\n      \n      // Calculate cost based on pricing and day\n      const currentPricing = await storage.getCurrentPricing();\n      if (!currentPricing) {\n        return res.status(400).json({ message: \"Pricing not configured\" });\n      }\n\n      const pricePerPlayer = gameData.isWeekend \n        ? parseFloat(currentPricing.weekendPrice) \n        : parseFloat(currentPricing.weekdayPrice);\n      \n      const totalCost = (pricePerPlayer * gameData.playerCount).toFixed(2);\n\n      const game = await storage.createGame({\n        ...gameData,\n        totalCost,\n      });\n\n      res.json(game);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Add scores to game\n  app.post(\"/api/games/:gameId/scores\", async (req, res) => {\n    try {\n      const { gameId } = req.params;\n      const scoresData = z.array(insertScoreSchema.omit({ gameId: true })).parse(req.body);\n      \n      const scores = await Promise.all(\n        scoresData.map(scoreData => \n          storage.createScore({ ...scoreData, gameId })\n        )\n      );\n\n      res.json(scores);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Get game with scores\n  app.get(\"/api/games/:gameId\", async (req, res) => {\n    try {\n      const { gameId } = req.params;\n      const game = await storage.getGame(gameId);\n      \n      if (!game) {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n\n      const scores = await storage.getScoresByGame(gameId);\n      res.json({ ...game, scores });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get current pricing\n  app.get(\"/api/pricing\", async (req, res) => {\n    try {\n      const pricing = await storage.getCurrentPricing();\n      if (!pricing) {\n        return res.status(404).json({ message: \"Pricing not found\" });\n      }\n      res.json(pricing);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin login\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.userId = user.id;\n      res.json({ message: \"Login successful\", user: { id: user.id, username: user.username } });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin logout\n  app.post(\"/api/admin/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Could not log out\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  // Check auth status\n  app.get(\"/api/admin/me\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ id: user.id, username: user.username });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/admin/dashboard-stats\", requireAuth, async (req, res) => {\n    try {\n      const today = new Date();\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n\n      const todayStats = await storage.getDailySales(today);\n      const yesterdayStats = await storage.getDailySales(yesterday);\n\n      // Calculate growth percentages\n      const gamesGrowth = yesterdayStats.totalGames > 0 \n        ? ((todayStats.totalGames - yesterdayStats.totalGames) / yesterdayStats.totalGames * 100).toFixed(1)\n        : \"0\";\n\n      const revenueGrowth = parseFloat(yesterdayStats.totalRevenue) > 0\n        ? ((parseFloat(todayStats.totalRevenue) - parseFloat(yesterdayStats.totalRevenue)) / parseFloat(yesterdayStats.totalRevenue) * 100).toFixed(1)\n        : \"0\";\n\n      res.json({\n        todayGames: todayStats.totalGames,\n        todayRevenue: `₹${parseFloat(todayStats.totalRevenue).toLocaleString()}`,\n        totalPlayers: todayStats.totalPlayers,\n        gamesGrowth: `${gamesGrowth}%`,\n        revenueGrowth: `${revenueGrowth}%`,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Recent games\n  app.get(\"/api/admin/recent-games\", requireAuth, async (req, res) => {\n    try {\n      const today = new Date();\n      const startOfDay = new Date(today);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(today);\n      endOfDay.setHours(23, 59, 59, 999);\n\n      const games = await storage.getGamesByDateRange(startOfDay, endOfDay);\n      \n      const recentGames = await Promise.all(games.slice(0, 10).map(async game => {\n        const player = await storage.getPlayer(game.playerId);\n        return {\n          id: game.id,\n          playerCount: game.playerCount,\n          leadPlayer: player?.name || \"Unknown\",\n          cost: `₹${parseFloat(game.totalCost).toLocaleString()}`,\n          time: new Date(game.completedAt).toLocaleTimeString('en-US', { \n            hour: 'numeric', \n            minute: '2-digit', \n            hour12: true \n          }),\n        };\n      }));\n\n      res.json(recentGames);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Sales analytics\n  app.get(\"/api/admin/sales/:period\", requireAuth, async (req, res) => {\n    try {\n      const { period } = req.params;\n      const today = new Date();\n\n      let stats;\n      switch (period) {\n        case \"day\":\n          stats = await storage.getDailySales(today);\n          break;\n        case \"week\":\n          const weekStart = new Date(today);\n          weekStart.setDate(today.getDate() - 7);\n          stats = await storage.getWeeklySales(weekStart);\n          break;\n        case \"month\":\n          const monthStart = new Date(today);\n          monthStart.setMonth(today.getMonth() - 1);\n          stats = await storage.getMonthlySales(monthStart);\n          break;\n        default:\n          return res.status(400).json({ message: \"Invalid period\" });\n      }\n\n      res.json({\n        totalGames: stats.totalGames,\n        totalRevenue: `₹${parseFloat(stats.totalRevenue).toLocaleString()}`,\n        totalPlayers: stats.totalPlayers,\n        avgPerGame: stats.totalGames > 0 \n          ? `₹${(parseFloat(stats.totalRevenue) / stats.totalGames).toFixed(0)}`\n          : \"₹0\",\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Hourly sales breakdown\n  app.get(\"/api/admin/hourly-sales\", requireAuth, async (req, res) => {\n    try {\n      const today = new Date();\n      const hourlyData = await storage.getHourlySales(today);\n      \n      // Fill in missing hours with zero data (covering all 24 hours)\n      const completeHourlyData = [];\n      for (let hour = 0; hour <= 23; hour++) {\n        const existingData = hourlyData.find(h => h.hour === hour);\n        let label;\n        if (hour === 0) label = \"12AM\";\n        else if (hour < 12) label = `${hour}AM`;\n        else if (hour === 12) label = \"12PM\";\n        else label = `${hour - 12}PM`;\n        \n        completeHourlyData.push({\n          hour,\n          games: existingData?.games || 0,\n          revenue: existingData?.revenue || \"0\",\n          label: label,\n        });\n      }\n\n      res.json(completeHourlyData);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Weekly sales breakdown (7 days)\n  app.get(\"/api/admin/weekly-sales\", requireAuth, async (req, res) => {\n    try {\n      const today = new Date();\n      const weeklyData = [];\n      \n      for (let i = 6; i >= 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        \n        const startOfDay = new Date(date);\n        startOfDay.setHours(0, 0, 0, 0);\n        const endOfDay = new Date(date);\n        endOfDay.setHours(23, 59, 59, 999);\n        \n        const stats = await storage.getSalesStats(startOfDay, endOfDay);\n        \n        weeklyData.push({\n          day: i,\n          games: stats.totalGames,\n          revenue: stats.totalRevenue,\n          label: date.toLocaleDateString('en-US', { weekday: 'short' }),\n        });\n      }\n\n      res.json(weeklyData);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Monthly sales breakdown (30 days)\n  app.get(\"/api/admin/monthly-sales\", requireAuth, async (req, res) => {\n    try {\n      const today = new Date();\n      const monthlyData = [];\n      \n      // Get last 30 days, group by week\n      for (let week = 3; week >= 0; week--) {\n        const weekStart = new Date(today);\n        weekStart.setDate(weekStart.getDate() - (week * 7 + 6));\n        weekStart.setHours(0, 0, 0, 0);\n        \n        const weekEnd = new Date(today);\n        weekEnd.setDate(weekEnd.getDate() - (week * 7));\n        weekEnd.setHours(23, 59, 59, 999);\n        \n        const stats = await storage.getSalesStats(weekStart, weekEnd);\n        \n        monthlyData.push({\n          week: 3 - week,\n          games: stats.totalGames,\n          revenue: stats.totalRevenue,\n          label: `Week ${4 - week}`,\n        });\n      }\n\n      res.json(monthlyData);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Update pricing\n  app.post(\"/api/admin/pricing\", requireAuth, async (req, res) => {\n    try {\n      const pricingData = insertPricingSchema.parse({\n        ...req.body,\n        updatedBy: req.session.userId,\n      });\n\n      const pricing = await storage.createPricing(pricingData);\n      res.json(pricing);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Get pricing history\n  app.get(\"/api/admin/pricing-history\", requireAuth, async (req, res) => {\n    try {\n      const history = await storage.getPricingHistory();\n      res.json(history);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get all transactions for a date\n  app.get(\"/api/admin/transactions\", requireAuth, async (req, res) => {\n    try {\n      const { date } = req.query;\n      const targetDate = date ? new Date(date as string) : new Date();\n      \n      const startOfDay = new Date(targetDate);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(targetDate);\n      endOfDay.setHours(23, 59, 59, 999);\n\n      const games = await storage.getGamesByDateRange(startOfDay, endOfDay);\n      \n      const transactions = games.map(game => ({\n        id: game.id,\n        time: new Date(game.completedAt).toLocaleTimeString('en-US', { \n          hour: 'numeric', \n          minute: '2-digit', \n          hour12: true \n        }),\n        player: game.playerNames[0] || \"Unknown\",\n        playerCount: game.playerCount,\n        cost: `₹${parseFloat(game.totalCost).toLocaleString()}`,\n        type: game.isWeekend ? \"Weekend\" : \"Weekday\",\n      }));\n\n      res.json(transactions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14458},"server/storage.ts":{"content":"import { \n  users, players, games, scores, pricing,\n  type User, type InsertUser,\n  type Player, type InsertPlayer,\n  type Game, type InsertGame,\n  type Score, type InsertScore,\n  type Pricing, type InsertPricing\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, gte, lte, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Player methods\n  createPlayer(player: InsertPlayer): Promise<Player>;\n  getPlayer(id: string): Promise<Player | undefined>;\n\n  // Game methods\n  createGame(game: InsertGame): Promise<Game>;\n  getGame(id: string): Promise<Game | undefined>;\n  getGames(startDate?: Date, endDate?: Date): Promise<Game[]>;\n  getGamesByDateRange(startDate: Date, endDate: Date): Promise<Game[]>;\n\n  // Score methods\n  createScore(score: InsertScore): Promise<Score>;\n  getScoresByGame(gameId: string): Promise<Score[]>;\n\n  // Pricing methods\n  getCurrentPricing(): Promise<Pricing | undefined>;\n  createPricing(pricing: InsertPricing): Promise<Pricing>;\n  getPricingHistory(): Promise<Pricing[]>;\n\n  // Analytics methods\n  getDailySales(date: Date): Promise<{ totalGames: number; totalRevenue: string; totalPlayers: number }>;\n  getWeeklySales(startDate: Date): Promise<{ totalGames: number; totalRevenue: string; totalPlayers: number }>;\n  getMonthlySales(startDate: Date): Promise<{ totalGames: number; totalRevenue: string; totalPlayers: number }>;\n  getHourlySales(date: Date): Promise<Array<{ hour: number; games: number; revenue: string }>>;\n  getSalesStats(startDate: Date, endDate: Date): Promise<{ totalGames: number; totalRevenue: string; totalPlayers: number }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async createPlayer(insertPlayer: InsertPlayer): Promise<Player> {\n    const [player] = await db\n      .insert(players)\n      .values(insertPlayer)\n      .returning();\n    return player;\n  }\n\n  async getPlayer(id: string): Promise<Player | undefined> {\n    const [player] = await db.select().from(players).where(eq(players.id, id));\n    return player || undefined;\n  }\n\n  async createGame(insertGame: InsertGame): Promise<Game> {\n    const [game] = await db\n      .insert(games)\n      .values(insertGame)\n      .returning();\n    return game;\n  }\n\n  async getGame(id: string): Promise<Game | undefined> {\n    const [game] = await db.select().from(games).where(eq(games.id, id));\n    return game || undefined;\n  }\n\n  async getGames(startDate?: Date, endDate?: Date): Promise<Game[]> {\n    let query = db.select().from(games);\n    \n    if (startDate && endDate) {\n      query = query.where(and(\n        gte(games.completedAt, startDate),\n        lte(games.completedAt, endDate)\n      ));\n    }\n    \n    return await query.orderBy(desc(games.completedAt));\n  }\n\n  async getGamesByDateRange(startDate: Date, endDate: Date): Promise<Game[]> {\n    return await db.select().from(games)\n      .where(and(\n        gte(games.completedAt, startDate),\n        lte(games.completedAt, endDate)\n      ))\n      .orderBy(desc(games.completedAt));\n  }\n\n  async createScore(insertScore: InsertScore): Promise<Score> {\n    const [score] = await db\n      .insert(scores)\n      .values(insertScore)\n      .returning();\n    return score;\n  }\n\n  async getScoresByGame(gameId: string): Promise<Score[]> {\n    return await db.select().from(scores)\n      .where(eq(scores.gameId, gameId))\n      .orderBy(scores.hole, scores.playerName);\n  }\n\n  async getCurrentPricing(): Promise<Pricing | undefined> {\n    const [currentPricing] = await db.select().from(pricing)\n      .orderBy(desc(pricing.updatedAt))\n      .limit(1);\n    return currentPricing || undefined;\n  }\n\n  async createPricing(insertPricing: InsertPricing): Promise<Pricing> {\n    const [newPricing] = await db\n      .insert(pricing)\n      .values(insertPricing)\n      .returning();\n    return newPricing;\n  }\n\n  async getPricingHistory(): Promise<Pricing[]> {\n    return await db.select().from(pricing)\n      .orderBy(desc(pricing.updatedAt));\n  }\n\n  async getDailySales(date: Date): Promise<{ totalGames: number; totalRevenue: string; totalPlayers: number }> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const [result] = await db\n      .select({\n        totalGames: sql<number>`count(*)::int`,\n        totalRevenue: sql<string>`sum(${games.totalCost})::text`,\n        totalPlayers: sql<number>`sum(${games.playerCount})::int`,\n      })\n      .from(games)\n      .where(and(\n        gte(games.completedAt, startOfDay),\n        lte(games.completedAt, endOfDay)\n      ));\n\n    return {\n      totalGames: result?.totalGames || 0,\n      totalRevenue: result?.totalRevenue || \"0\",\n      totalPlayers: result?.totalPlayers || 0,\n    };\n  }\n\n  async getWeeklySales(startDate: Date): Promise<{ totalGames: number; totalRevenue: string; totalPlayers: number }> {\n    const endDate = new Date(startDate);\n    endDate.setDate(endDate.getDate() + 7);\n\n    const [result] = await db\n      .select({\n        totalGames: sql<number>`count(*)::int`,\n        totalRevenue: sql<string>`sum(${games.totalCost})::text`,\n        totalPlayers: sql<number>`sum(${games.playerCount})::int`,\n      })\n      .from(games)\n      .where(and(\n        gte(games.completedAt, startDate),\n        lte(games.completedAt, endDate)\n      ));\n\n    return {\n      totalGames: result?.totalGames || 0,\n      totalRevenue: result?.totalRevenue || \"0\",\n      totalPlayers: result?.totalPlayers || 0,\n    };\n  }\n\n  async getMonthlySales(startDate: Date): Promise<{ totalGames: number; totalRevenue: string; totalPlayers: number }> {\n    const endDate = new Date(startDate);\n    endDate.setMonth(endDate.getMonth() + 1);\n\n    const [result] = await db\n      .select({\n        totalGames: sql<number>`count(*)::int`,\n        totalRevenue: sql<string>`sum(${games.totalCost})::text`,\n        totalPlayers: sql<number>`sum(${games.playerCount})::int`,\n      })\n      .from(games)\n      .where(and(\n        gte(games.completedAt, startDate),\n        lte(games.completedAt, endDate)\n      ));\n\n    return {\n      totalGames: result?.totalGames || 0,\n      totalRevenue: result?.totalRevenue || \"0\",\n      totalPlayers: result?.totalPlayers || 0,\n    };\n  }\n\n  async getHourlySales(date: Date): Promise<Array<{ hour: number; games: number; revenue: string }>> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const results = await db\n      .select({\n        hour: sql<number>`extract(hour from ${games.completedAt})::int`,\n        games: sql<number>`count(*)::int`,\n        revenue: sql<string>`sum(${games.totalCost})::text`,\n      })\n      .from(games)\n      .where(and(\n        gte(games.completedAt, startOfDay),\n        lte(games.completedAt, endOfDay)\n      ))\n      .groupBy(sql`extract(hour from ${games.completedAt})`)\n      .orderBy(sql`extract(hour from ${games.completedAt})`);\n\n    return results.map(r => ({\n      hour: r.hour,\n      games: r.games,\n      revenue: r.revenue || \"0\"\n    }));\n  }\n\n  async getSalesStats(startDate: Date, endDate: Date): Promise<{ totalGames: number; totalRevenue: string; totalPlayers: number }> {\n    const [result] = await db\n      .select({\n        totalGames: sql<number>`count(*)::int`,\n        totalRevenue: sql<string>`sum(${games.totalCost})::text`,\n        totalPlayers: sql<number>`sum(${games.playerCount})::int`,\n      })\n      .from(games)\n      .where(and(\n        gte(games.completedAt, startDate),\n        lte(games.completedAt, endDate)\n      ));\n\n    return {\n      totalGames: result?.totalGames || 0,\n      totalRevenue: result?.totalRevenue || \"0\",\n      totalPlayers: result?.totalPlayers || 0,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8517},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const players = pgTable(\"players\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  contact: text(\"contact\").notNull(),\n  email: text(\"email\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const games = pgTable(\"games\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  playerId: varchar(\"player_id\").notNull().references(() => players.id),\n  playerNames: text(\"player_names\").array().notNull(),\n  playerCount: integer(\"player_count\").notNull(),\n  totalCost: decimal(\"total_cost\", { precision: 10, scale: 2 }).notNull(),\n  isWeekend: boolean(\"is_weekend\").notNull(),\n  completedAt: timestamp(\"completed_at\").defaultNow().notNull(),\n});\n\nexport const scores = pgTable(\"scores\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id),\n  playerName: text(\"player_name\").notNull(),\n  hole: integer(\"hole\").notNull(),\n  strokes: integer(\"strokes\").notNull(),\n});\n\nexport const pricing = pgTable(\"pricing\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  weekdayPrice: decimal(\"weekday_price\", { precision: 10, scale: 2 }).notNull(),\n  weekendPrice: decimal(\"weekend_price\", { precision: 10, scale: 2 }).notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  updatedBy: varchar(\"updated_by\").notNull().references(() => users.id),\n});\n\n// Relations\nexport const playersRelations = relations(players, ({ many }) => ({\n  games: many(games),\n}));\n\nexport const gamesRelations = relations(games, ({ one, many }) => ({\n  player: one(players, {\n    fields: [games.playerId],\n    references: [players.id],\n  }),\n  scores: many(scores),\n}));\n\nexport const scoresRelations = relations(scores, ({ one }) => ({\n  game: one(games, {\n    fields: [scores.gameId],\n    references: [games.id],\n  }),\n}));\n\nexport const pricingRelations = relations(pricing, ({ one }) => ({\n  updatedByUser: one(users, {\n    fields: [pricing.updatedBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertPlayerSchema = createInsertSchema(players).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGameSchema = createInsertSchema(games, {\n  playerNames: z.array(z.string()).min(1),\n  playerCount: z.number().int().min(1).max(8),\n  isWeekend: z.boolean(),\n}).omit({\n  id: true,\n  completedAt: true,\n  totalCost: true,\n});\n\nexport const insertScoreSchema = createInsertSchema(scores).omit({\n  id: true,\n});\n\nexport const insertPricingSchema = createInsertSchema(pricing).omit({\n  id: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Player = typeof players.$inferSelect;\nexport type InsertPlayer = z.infer<typeof insertPlayerSchema>;\n\nexport type Game = typeof games.$inferSelect;\nexport type InsertGame = z.infer<typeof insertGameSchema>;\n\nexport type Score = typeof scores.$inferSelect;\nexport type InsertScore = z.infer<typeof insertScoreSchema>;\n\nexport type Pricing = typeof pricing.$inferSelect;\nexport type InsertPricing = z.infer<typeof insertPricingSchema>;\n","size_bytes":3712},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Registration from \"@/pages/registration\";\nimport TermsAndConditions from \"@/pages/terms-and-conditions\";\nimport PlayerSetup from \"@/pages/player-setup\";\nimport Gameplay from \"@/pages/gameplay\";\nimport Results from \"@/pages/results\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport Sales from \"@/pages/sales\";\nimport Pricing from \"@/pages/pricing\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Player Flow */}\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/register\" component={Registration} />\n      <Route path=\"/registration\" component={Registration} />\n      <Route path=\"/terms\" component={TermsAndConditions} />\n      <Route path=\"/players\" component={PlayerSetup} />\n      <Route path=\"/game/:gameId\" component={Gameplay} />\n      <Route path=\"/results/:gameId\" component={Results} />\n      \n      {/* Admin Flow */}\n      <Route path=\"/admin\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route path=\"/admin/sales\" component={Sales} />\n      <Route path=\"/admin/pricing\" component={Pricing} />\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1804},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(140, 52%, 35%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Golf theme colors */\n  --golf-green: hsl(120, 40%, 20%);\n  --golf-light: hsl(120, 50%, 35%);\n  --golf-sand: hsl(25, 25%, 45%);\n  --golf-cream: hsl(120, 60%, 97%);\n  --golf-dark: hsl(120, 60%, 10%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(140, 52%, 35%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Golf theme utility classes */\n.bg-golf-green {\n  background-color: var(--golf-green);\n}\n\n.bg-golf-light {\n  background-color: var(--golf-light);\n}\n\n.bg-golf-cream {\n  background-color: var(--golf-cream);\n}\n\n.text-golf-green {\n  color: var(--golf-green);\n}\n\n.text-golf-light {\n  color: var(--golf-light);\n}\n\n.text-golf-dark {\n  color: var(--golf-dark);\n}\n\n.border-golf-green {\n  border-color: var(--golf-green);\n}\n\n.hover\\:bg-golf-light:hover {\n  background-color: var(--golf-light);\n}\n\n/* Golf animations */\n@keyframes golfBall {\n  0%, 100% { transform: translateX(0px) rotate(0deg); }\n  25% { transform: translateX(10px) rotate(90deg); }\n  50% { transform: translateX(20px) rotate(180deg); }\n  75% { transform: translateX(10px) rotate(270deg); }\n}\n\n@keyframes flagWave {\n  0%, 100% { transform: rotate(0deg); }\n  50% { transform: rotate(5deg); }\n}\n\n.golf-ball-animation {\n  animation: golfBall 3s ease-in-out infinite;\n}\n\n.flag-wave {\n  animation: flagWave 2s ease-in-out infinite;\n  transform-origin: bottom left;\n}\n\n.fade-in {\n  animation: fadeIn 0.8s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n","size_bytes":3084},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/admin-sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  TrendingUp, \n  Tag, \n  Users, \n  Settings,\n  Menu,\n  X\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\n\ninterface AdminSidebarProps {\n  className?: string;\n}\n\nexport default function AdminSidebar({ className }: AdminSidebarProps) {\n  const [location] = useLocation();\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\n\n  const menuItems = [\n    { path: \"/admin/dashboard\", icon: LayoutDashboard, label: \"Dashboard\" },\n    { path: \"/admin/sales\", icon: TrendingUp, label: \"Sales\" },\n    { path: \"/admin/pricing\", icon: Tag, label: \"Pricing\" },\n    { path: \"/admin/players\", icon: Users, label: \"Players\" },\n    { path: \"/admin/settings\", icon: Settings, label: \"Settings\" },\n  ];\n\n  return (\n    <>\n      {/* Mobile Menu Button */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"md:hidden fixed top-4 left-4 z-50 bg-white shadow-md\"\n        onClick={() => setIsMobileOpen(!isMobileOpen)}\n      >\n        {isMobileOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n      </Button>\n\n      {/* Mobile Overlay */}\n      {isMobileOpen && (\n        <div \n          className=\"md:hidden fixed inset-0 bg-black bg-opacity-50 z-20\"\n          onClick={() => setIsMobileOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={`fixed left-0 top-0 h-screen w-64 bg-white shadow-lg z-30 transform transition-transform duration-300 ease-in-out ${\n        isMobileOpen ? 'translate-x-0' : '-translate-x-full'\n      } md:translate-x-0 ${className}`}>\n        <div className=\"p-6 border-b\">\n          <h1 className=\"text-xl text-golf-green font-bold\">Madras Mini Golf</h1>\n          <p className=\"text-sm text-gray-600\">Admin Dashboard</p>\n        </div>\n        \n        <nav className=\"mt-6\">\n          {menuItems.map((item) => {\n            const isActive = location === item.path;\n            const Icon = item.icon;\n            \n            return (\n              <Link key={item.path} href={item.path}>\n                <div\n                  className={`flex items-center px-6 py-3 text-gray-600 hover:bg-gray-50 transition-colors cursor-pointer ${\n                    isActive ? \"text-gray-700 bg-golf-cream border-r-4 border-golf-green\" : \"\"\n                  }`}\n                  onClick={() => setIsMobileOpen(false)}\n                >\n                  <Icon className=\"mr-3 h-5 w-5\" />\n                  {item.label}\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n    </>\n  );\n}\n","size_bytes":2635},"client/src/components/golf-animation.tsx":{"content":"import { motion } from \"framer-motion\";\n\nexport default function GolfAnimation() {\n  return (\n    <div className=\"mb-8 relative flex items-center justify-center\">\n      {/* Golf ball with animation */}\n      <motion.div\n        className=\"text-8xl\"\n        animate={{\n          x: [0, 10, 20, 10, 0],\n          rotate: [0, 90, 180, 270, 360],\n        }}\n        transition={{\n          duration: 3,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n        }}\n      >\n        ⛳\n      </motion.div>\n      \n      {/* Flag with wave animation */}\n      <motion.div\n        className=\"text-6xl absolute top-0 right-1/3\"\n        animate={{\n          rotate: [0, 5, 0, -5, 0],\n        }}\n        transition={{\n          duration: 2,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n        }}\n        style={{ transformOrigin: \"bottom left\" }}\n      >\n        🚩\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":914},"client/src/components/golf-loader.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface GolfLoaderProps {\n  text?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n  overlay?: boolean;\n}\n\nexport default function GolfLoader({ text = \"Loading...\", size = \"md\", className = \"\", overlay = false }: GolfLoaderProps) {\n  const sizeClasses = {\n    sm: \"w-8 h-8\",\n    md: \"w-12 h-12\", \n    lg: \"w-16 h-16\"\n  };\n\n  const ballSize = {\n    sm: \"w-2 h-2\",\n    md: \"w-3 h-3\",\n    lg: \"w-4 h-4\"\n  };\n\n  const textSize = {\n    sm: \"text-sm\",\n    md: \"text-base\",\n    lg: \"text-lg\"\n  };\n\n  const loaderContent = (\n    <div className={`flex flex-col items-center justify-center space-y-4 ${overlay ? 'relative z-50' : ''} ${className}`}>\n      {/* Golf Ball Animation */}\n      <div className={`relative ${sizeClasses[size]}`}>\n        {/* Golf Course/Hole */}\n        <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2\">\n          <div className=\"w-6 h-2 bg-golf-green rounded-full opacity-60\"></div>\n          <div className=\"w-3 h-3 bg-gray-800 rounded-full mx-auto -mt-1\"></div>\n        </div>\n        \n        {/* Animated Golf Ball */}\n        <motion.div\n          className={`${ballSize[size]} bg-white border-2 border-gray-300 rounded-full absolute shadow-sm`}\n          style={{\n            background: \"radial-gradient(circle at 30% 30%, #ffffff, #f0f0f0)\",\n            boxShadow: \"0 2px 4px rgba(0,0,0,0.1), inset -1px -1px 2px rgba(0,0,0,0.1)\"\n          }}\n          animate={{\n            x: [-20, -10, 0, 10, 20, 10, 0, -10, -20],\n            y: [0, -8, -16, -8, 0, -6, -12, -6, 0],\n            rotate: [0, -90, -180, -270, -360, -450, -540, -630, -720]\n          }}\n          transition={{\n            duration: 2,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n        \n        {/* Golf Club Animation */}\n        <motion.div\n          className=\"absolute -right-6 bottom-2 origin-bottom-right\"\n          animate={{\n            rotate: [-15, 25, -15]\n          }}\n          transition={{\n            duration: 2,\n            repeat: Infinity,\n            ease: \"easeInOut\",\n            times: [0, 0.3, 1]\n          }}\n        >\n          <div className=\"w-0.5 h-8 bg-amber-700 rounded\"></div>\n          <div className=\"w-3 h-1.5 bg-gray-400 rounded-sm -mt-0.5 ml-0.5 shadow-sm\"></div>\n        </motion.div>\n      </div>\n\n      {/* Loading Text with Golf Theme */}\n      <div className=\"flex items-center space-x-2\">\n        <motion.span\n          className={`${textSize[size]} text-golf-green font-medium`}\n          animate={{ opacity: [0.5, 1, 0.5] }}\n          transition={{ duration: 1.5, repeat: Infinity }}\n        >\n          {text}\n        </motion.span>\n        \n        {/* Animated Dots */}\n        <div className=\"flex space-x-1\">\n          {[0, 1, 2].map((i) => (\n            <motion.div\n              key={i}\n              className=\"w-1 h-1 bg-golf-green rounded-full\"\n              animate={{ opacity: [0.3, 1, 0.3] }}\n              transition={{\n                duration: 1.5,\n                repeat: Infinity,\n                delay: i * 0.2\n              }}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Golf-themed Progress Indicator */}\n      <div className=\"w-24 h-1 bg-gray-200 rounded-full overflow-hidden\">\n        <motion.div\n          className=\"h-full bg-gradient-to-r from-golf-green to-golf-light rounded-full\"\n          animate={{ width: [\"0%\", \"100%\", \"0%\"] }}\n          transition={{\n            duration: 3,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      </div>\n    </div>\n  );\n\n  if (overlay) {\n    return (\n      <div className=\"fixed inset-0 bg-black/40 backdrop-blur-sm flex items-center justify-center z-50\">\n        {loaderContent}\n      </div>\n    );\n  }\n\n  return loaderContent;\n}","size_bytes":3815},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport GolfLoader from \"@/components/golf-loader\";\nimport AdminSidebar from \"@/components/admin-sidebar\";\nimport { Gamepad2, IndianRupee, Users, Target, LogOut } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function AdminDashboard() {\n  const [, navigate] = useLocation();\n\n  // Check authentication\n  const { data: user, isLoading: userLoading, error } = useQuery({\n    queryKey: [\"/api/admin/me\"],\n    retry: false,\n  });\n\n  const { data: dashboardStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/admin/dashboard-stats\"],\n    enabled: !!user,\n  });\n\n  const { data: recentGames, isLoading: gamesLoading } = useQuery({\n    queryKey: [\"/api/admin/recent-games\"],\n    enabled: !!user,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/admin/logout\"),\n    onSuccess: () => {\n      navigate(\"/admin\");\n    },\n  });\n\n  useEffect(() => {\n    if (error && !userLoading) {\n      navigate(\"/admin\");\n    }\n  }, [error, userLoading, navigate]);\n\n  if (userLoading) {\n    return <GolfLoader text=\"Loading dashboard\" size=\"lg\" overlay={true} />;\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <AdminSidebar />\n      \n      {/* Main Content */}\n      <div className=\"md:ml-64 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-gray-200 px-4 md:px-8 py-4 pt-16 md:pt-4\">\n          <div className=\"flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n            <div>\n              <h1 className=\"text-xl md:text-2xl font-bold text-gray-800\">Dashboard Overview</h1>\n              <p className=\"text-sm md:text-base text-gray-600\">Welcome back! Here's what's happening today.</p>\n            </div>\n            <Button\n              onClick={() => logoutMutation.mutate()}\n              variant=\"outline\"\n              className=\"flex items-center gap-2 text-gray-600 hover:text-gray-800 self-start md:self-auto\"\n              disabled={logoutMutation.isPending}\n              size=\"sm\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n              {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"flex-1 p-4 md:p-8\">\n        \n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Today's Games</p>\n                  <p className=\"text-2xl font-bold text-gray-800\">\n                    {statsLoading ? \"...\" : (dashboardStats as any)?.todayGames || 0}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-blue-100 rounded-full\">\n                  <Gamepad2 className=\"h-6 w-6 text-blue-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-green-600 font-medium\">\n                  {(dashboardStats as any)?.gamesGrowth || \"+0%\"}\n                </span>\n                <span className=\"text-gray-600 ml-1\">from yesterday</span>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Today's Revenue</p>\n                  <p className=\"text-2xl font-bold text-gray-800\">\n                    {statsLoading ? \"...\" : (dashboardStats as any)?.todayRevenue || \"₹0\"}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-green-100 rounded-full\">\n                  <IndianRupee className=\"h-6 w-6 text-green-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-green-600 font-medium\">\n                  {(dashboardStats as any)?.revenueGrowth || \"+0%\"}\n                </span>\n                <span className=\"text-gray-600 ml-1\">from yesterday</span>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Players</p>\n                  <p className=\"text-2xl font-bold text-gray-800\">\n                    {statsLoading ? \"...\" : (dashboardStats as any)?.totalPlayers || 0}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-purple-100 rounded-full\">\n                  <Users className=\"h-6 w-6 text-purple-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-green-600 font-medium\">\n                  +{(dashboardStats as any)?.totalPlayers || 0}\n                </span>\n                <span className=\"text-gray-600 ml-1\">today</span>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Avg. Score</p>\n                  <p className=\"text-2xl font-bold text-gray-800\">\n                    {statsLoading ? \"...\" : \"23.5\"}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-orange-100 rounded-full\">\n                  <Target className=\"h-6 w-6 text-orange-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-red-600 font-medium\">-0.8</span>\n                <span className=\"text-gray-600 ml-1\">improvement</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Recent Games */}\n        <Card className=\"shadow-md\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Recent Games</h3>\n            <div className=\"space-y-4\">\n              {gamesLoading ? (\n                <div className=\"flex justify-center py-8\">\n                  <GolfLoader text=\"Loading recent games\" size=\"sm\" />\n                </div>\n              ) : recentGames && Array.isArray(recentGames) && recentGames.length > 0 ? (\n                recentGames.map((game: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between py-2 border-b border-gray-100 last:border-b-0\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 bg-golf-green text-white rounded-full flex items-center justify-center font-bold mr-3\">\n                        <span>{game.playerCount}</span>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-800\">{game.leadPlayer}</p>\n                        <p className=\"text-sm text-gray-600\">{game.time}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium text-golf-green\">{game.cost}</p>\n                      <p className=\"text-sm text-gray-600\">45 min</p>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-gray-600\">No games played today</div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8255},"client/src/pages/admin-login.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { ArrowLeft, Lock, LogIn, Eye, EyeOff } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useEffect, useState } from \"react\";\nimport { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  remember: z.boolean().default(false),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function AdminLogin() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n\n  // Check if already authenticated\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/admin/me\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (user && !isLoading) {\n      navigate(\"/admin/dashboard\");\n    }\n  }, [user, isLoading, navigate]);\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      remember: false,\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: (data: Omit<LoginForm, \"remember\">) => \n      apiRequest(\"POST\", \"/api/admin/login\", data),\n    onSuccess: () => {\n      navigate(\"/admin/dashboard\");\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to the admin dashboard!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    const { remember, ...loginData } = data;\n    loginMutation.mutate(loginData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center\">\n        <div className=\"text-white\">Checking authentication...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl\">\n        <CardContent className=\"p-8\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"text-4xl mb-4\">🔐</div>\n            <h2 className=\"text-2xl font-bold text-gray-800\">Admin Login</h2>\n            <p className=\"text-gray-600\">Access the management dashboard</p>\n          </div>\n          \n          {/* Login Form */}\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 font-medium\">Username</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter username\" \n                        className=\"border-2 border-gray-200 focus:border-golf-green\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 font-medium\">Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input \n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Enter password\" \n                          className=\"border-2 border-gray-200 focus:border-golf-green pr-10\"\n                          {...field}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4 text-gray-400\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"flex items-center justify-between\">\n                <FormField\n                  control={form.control}\n                  name=\"remember\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox \n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel className=\"text-sm text-gray-600\">\n                          Remember me\n                        </FormLabel>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n                <AlertDialog>\n                  <AlertDialogTrigger asChild>\n                    <button className=\"text-sm text-golf-green hover:underline\">\n                      Forgot password?\n                    </button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Password Reset</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        For security reasons, password reset must be done manually by the system administrator. \n                        Please contact your IT administrator or the person who set up this mini golf system \n                        to reset your password.\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogAction>Understood</AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-golf-green hover:bg-golf-light text-white font-bold py-3\"\n                disabled={loginMutation.isPending}\n              >\n                <LogIn className=\"mr-2 h-4 w-4\" />\n                {loginMutation.isPending ? \"Logging In...\" : \"Login\"}\n              </Button>\n            </form>\n          </Form>\n          \n          {/* Back to Game Link */}\n          <div className=\"text-center mt-6\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => navigate(\"/\")}\n              className=\"text-golf-green hover:underline text-sm\"\n            >\n              <ArrowLeft className=\"mr-1 h-4 w-4\" />\n              Back to Game\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8255},"client/src/pages/gameplay.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, ArrowRight, Flag } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport GolfLoader from \"@/components/golf-loader\";\n\nexport default function Gameplay() {\n  const { gameId } = useParams();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  const [currentHole, setCurrentHole] = useState(1);\n  const [playerNames, setPlayerNames] = useState<string[]>([]);\n  const [totalScores, setTotalScores] = useState<{ [playerName: string]: number }>({});\n  const [holeScores, setHoleScores] = useState<{ [playerName: string]: number }>({});\n\n  useEffect(() => {\n    // Load player names and game data\n    const storedNames = sessionStorage.getItem(\"playerNames\");\n    const currentGame = sessionStorage.getItem(\"currentGame\");\n    \n    if (!storedNames || !currentGame) {\n      navigate(\"/\");\n      return;\n    }\n    \n    const names = JSON.parse(storedNames);\n    setPlayerNames(names);\n    \n    // Initialize scores\n    const initialTotalScores: { [playerName: string]: number } = {};\n    const initialHoleScores: { [playerName: string]: number } = {};\n    \n    names.forEach((name: string) => {\n      initialTotalScores[name] = 0;\n      initialHoleScores[name] = 0;\n    });\n    \n    setTotalScores(initialTotalScores);\n    setHoleScores(initialHoleScores);\n  }, [navigate]);\n\n  const saveScoresMutation = useMutation({\n    mutationFn: (scoresData: any[]) => apiRequest(\"POST\", `/api/games/${gameId}/scores`, scoresData),\n    onSuccess: () => {\n      // Game completed, navigate to results\n      navigate(`/results/${gameId}`);\n    },\n    onError: () => {\n      toast({\n        title: \"Error saving scores\",\n        description: \"There was an error saving the scores. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleScoreSelect = (playerName: string, strokes: number) => {\n    setHoleScores(prev => ({\n      ...prev,\n      [playerName]: strokes,\n    }));\n  };\n\n  const handleManualScore = (playerName: string, strokes: string) => {\n    // Allow empty string to clear the field\n    if (strokes === \"\") {\n      setHoleScores(prev => ({\n        ...prev,\n        [playerName]: 0,\n      }));\n      return;\n    }\n    \n    // Only allow numeric characters\n    if (!/^\\d+$/.test(strokes)) {\n      return;\n    }\n    \n    const strokeCount = parseInt(strokes);\n    // Validate range 1-20 (now allowing all strokes to be manually entered)\n    if (strokeCount >= 1 && strokeCount <= 20) {\n      setHoleScores(prev => ({\n        ...prev,\n        [playerName]: strokeCount,\n      }));\n    }\n  };\n\n\n\n  const calculateTotalScore = (playerName: string) => {\n    return totalScores[playerName] || 0;\n  };\n\n  const handleNextHole = () => {\n    // Validate all players have scores\n    const missingScores = playerNames.filter(name => !holeScores[name] || holeScores[name] === 0);\n    \n    if (missingScores.length > 0) {\n      toast({\n        title: \"Missing scores\",\n        description: \"Please enter scores for all players before continuing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Update total scores with current hole scores\n    const updatedTotalScores = { ...totalScores };\n    playerNames.forEach(playerName => {\n      updatedTotalScores[playerName] += holeScores[playerName];\n    });\n    setTotalScores(updatedTotalScores);\n\n    if (currentHole === 7) {\n      // Game completed - save only total scores\n      const scoresData = playerNames.map(playerName => ({\n        playerName,\n        hole: 1, // Just using hole 1 as a placeholder since we only store total\n        strokes: updatedTotalScores[playerName],\n      }));\n\n      saveScoresMutation.mutate(scoresData);\n    } else {\n      // Move to next hole\n      setCurrentHole(prev => prev + 1);\n      // Reset hole scores for next hole\n      const resetHoleScores: { [playerName: string]: number } = {};\n      playerNames.forEach(name => {\n        resetHoleScores[name] = 0;\n      });\n      setHoleScores(resetHoleScores);\n      \n      // Scroll to top of page\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  };\n\n  const handlePreviousHole = () => {\n    if (currentHole > 1) {\n      setCurrentHole(prev => prev - 1);\n      // Reset hole scores for previous hole\n      const resetHoleScores: { [playerName: string]: number } = {};\n      playerNames.forEach(name => {\n        resetHoleScores[name] = 0;\n      });\n      setHoleScores(resetHoleScores);\n      \n      // Scroll to top of page\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  };\n\n  if (!playerNames.length) {\n    return <GolfLoader text=\"Loading game\" size=\"lg\" overlay={true} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-golf-cream p-4\">\n      {saveScoresMutation.isPending && (\n        <GolfLoader text=\"Saving game scores\" size=\"lg\" overlay={true} />\n      )}\n      <div className=\"max-w-md mx-auto pt-8\">\n        {/* Header with Hole Info */}\n        <div className=\"text-center mb-6\">\n          <div className=\"relative inline-block mb-4\">\n            <div className=\"text-5xl mb-2\">⛳</div>\n            <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg border-2 border-white animate-pulse\">\n              {currentHole}\n            </div>\n          </div>\n          <h2 className=\"text-3xl font-bold text-golf-dark bg-gradient-to-r from-yellow-400 to-yellow-600 bg-clip-text text-transparent\">\n            Hole {currentHole}\n          </h2>\n          <p className=\"text-golf-dark opacity-75\">Enter scores for each player</p>\n        </div>\n        \n        {/* Progress Indicators */}\n        <div className=\"flex justify-center space-x-3 mb-8\">\n          {Array.from({ length: 7 }, (_, i) => i + 1).map(hole => (\n            <div\n              key={`hole-${hole}`}\n              className={`relative flex items-center justify-center text-sm font-bold transition-all duration-300 ${\n                hole < currentHole\n                  ? \"w-8 h-8 rounded-full bg-golf-green text-white shadow-md\"\n                  : hole === currentHole\n                  ? \"w-10 h-10 rounded-full bg-gradient-to-br from-yellow-400 to-yellow-600 text-white shadow-lg border-3 border-white transform scale-105 animate-pulse\"\n                  : \"w-8 h-8 rounded-full bg-gray-300 text-gray-600\"\n              }`}\n            >\n              {hole === currentHole && (\n                <div className=\"absolute -inset-1 rounded-full bg-gradient-to-r from-yellow-400 to-orange-500 opacity-75 blur-sm animate-pulse\"></div>\n              )}\n              <span className=\"relative z-10 font-extrabold\">\n                {hole}\n              </span>\n              {hole < currentHole && (\n                <div className=\"absolute -top-1 -right-1\">\n                  <Flag className=\"w-4 h-4 text-red-500 drop-shadow-sm\" fill=\"currentColor\" />\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n        \n\n\n        {/* Player Scoring */}\n        <div className=\"space-y-6\">\n          {playerNames.map((playerName, index) => (\n            <Card key={`player-${index}-${playerName}`} className=\"shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 bg-golf-green text-white rounded-full flex items-center justify-center font-bold mr-3\">\n                    {index + 1}\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-golf-dark\">{playerName}</h3>\n                </div>\n                \n                {/* Score Buttons and Incrementer */}\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"grid grid-cols-6 gap-3 flex-1\">\n                    {[1, 2, 3, 4, 5, 6].map(strokes => (\n                      <Button\n                        key={`${playerName}-stroke-${strokes}`}\n                        variant={holeScores[playerName] === strokes ? \"default\" : \"outline\"}\n                        className={`py-3 font-bold transition-all duration-200 ${\n                          holeScores[playerName] === strokes\n                            ? \"bg-golf-green text-white border-golf-green\"\n                            : \"bg-gray-100 border-2 border-gray-200 hover:border-golf-green hover:bg-golf-green hover:text-white\"\n                        }`}\n                        onClick={() => handleScoreSelect(playerName, strokes)}\n                      >\n                        {strokes}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  {/* Manual Input for 7+ */}\n                  <div className=\"flex-shrink-0\">\n                    <Input\n                      type=\"text\"\n                      className=\"w-16 h-10 text-center border-2 border-gray-200 focus:border-golf-green text-sm font-bold\"\n                      onChange={(e) => handleManualScore(playerName, e.target.value)}\n                      value={holeScores[playerName] > 6 ? holeScores[playerName].toString() : \"\"}\n                      placeholder=\"7+\"\n                    />\n                  </div>\n                </div>\n                \n                {/* Individual Player Total (from hole 2 onwards) */}\n                {currentHole > 1 && (\n                  <div className=\"bg-golf-green rounded-lg p-3 text-center shadow-md\">\n                    <div className=\"text-white font-bold text-lg\">\n                      Total: {calculateTotalScore(playerName)} strokes\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        \n        {/* Navigation Buttons */}\n        <div className=\"flex space-x-4 mt-8\">\n          <Button\n            onClick={handlePreviousHole}\n            disabled={currentHole === 1}\n            variant=\"outline\"\n            className=\"flex-1 font-bold py-3 border-2 border-gray-300 hover:bg-gray-50\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Previous Hole\n          </Button>\n          <Button\n            onClick={handleNextHole}\n            disabled={saveScoresMutation.isPending}\n            className=\"flex-1 bg-golf-green hover:bg-golf-light text-white font-bold py-3\"\n          >\n            {saveScoresMutation.isPending ? \"Saving...\" : currentHole === 7 ? \"Finish Game\" : \"Next Hole\"}\n            {currentHole === 7 ? <Flag className=\"ml-2 h-4 w-4\" /> : <ArrowRight className=\"ml-2 h-4 w-4\" />}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11013},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport GolfAnimation from \"@/components/golf-animation\";\nimport { motion } from \"framer-motion\";\nimport { Play, QrCode, Settings } from \"lucide-react\";\n\nexport default function Landing() {\n  const [, navigate] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-golf-cream to-green-100 flex items-center justify-center p-4 relative\">\n      {/* Admin Toggle Button */}\n      <motion.div \n        className=\"absolute top-4 right-4\"\n        initial={{ opacity: 0, x: 20 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ delay: 0.3, duration: 0.5 }}\n      >\n        <Button \n          onClick={() => navigate(\"/admin\")}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"bg-white/80 backdrop-blur-sm border-golf-green text-golf-green hover:bg-golf-green hover:text-white transition-all duration-300\"\n        >\n          <Settings className=\"mr-2 h-4 w-4\" />\n          Admin\n        </Button>\n      </motion.div>\n\n      <motion.div \n        className=\"text-center\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.8 }}\n      >\n        <GolfAnimation />\n        \n        {/* Title */}\n        <motion.h1 \n          className=\"text-5xl md:text-6xl text-golf-green mb-4 font-bold\"\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2, duration: 0.6 }}\n        >\n          Madras Mini Golf\n        </motion.h1>\n        \n        <motion.p \n          className=\"text-xl text-golf-dark mb-8 max-w-md mx-auto\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n        >\n          Welcome to the ultimate mini golf experience! Ready to play?\n        </motion.p>\n        \n        {/* Start Game Button */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.6 }}\n        >\n          <Button \n            onClick={() => navigate(\"/register\")}\n            size=\"lg\"\n            className=\"bg-golf-green hover:bg-golf-light text-white font-bold py-4 px-8 rounded-full text-xl shadow-lg transform hover:scale-105 transition-all duration-300\"\n          >\n            <Play className=\"mr-3 h-6 w-6\" />\n            Start Game\n          </Button>\n        </motion.div>\n        \n        {/* QR Code Info */}\n        <motion.div \n          className=\"mt-8 text-sm text-golf-dark opacity-75\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.8, duration: 0.6 }}\n        >\n          <QrCode className=\"inline mr-2 h-4 w-4\" />\n          Scanned from QR Code\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":2905},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/player-setup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Play, Users } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport GolfLoader from \"@/components/golf-loader\";\n\nexport default function PlayerSetup() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [selectedPlayerCount, setSelectedPlayerCount] = useState(4);\n  const [playerNames, setPlayerNames] = useState<string[]>([\"\", \"\", \"\", \"\"]);\n\n  // Get current pricing to determine weekend/weekday\n  const { data: pricing } = useQuery({\n    queryKey: [\"/api/pricing\"],\n  });\n\n  useEffect(() => {\n    // Check if player is registered\n    const currentPlayer = sessionStorage.getItem(\"currentPlayer\");\n    if (!currentPlayer) {\n      navigate(\"/register\");\n      return;\n    }\n\n    // Update player names array when count changes\n    const newNames = Array(selectedPlayerCount).fill(\"\").map((_, i) => playerNames[i] || \"\");\n    setPlayerNames(newNames);\n  }, [selectedPlayerCount, navigate]);\n\n  const createGameMutation = useMutation({\n    mutationFn: (gameData: any) => apiRequest(\"POST\", \"/api/games\", gameData),\n    onSuccess: async (response) => {\n      const game = await response.json();\n      // Store game data and player names for gameplay\n      sessionStorage.setItem(\"currentGame\", JSON.stringify(game));\n      sessionStorage.setItem(\"playerNames\", JSON.stringify(playerNames.filter(name => name.trim())));\n      navigate(`/game/${game.id}`);\n    },\n    onError: () => {\n      toast({\n        title: \"Game creation failed\",\n        description: \"There was an error starting the game. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePlayerCountSelect = (count: number) => {\n    setSelectedPlayerCount(count);\n  };\n\n  const handlePlayerNameChange = (index: number, name: string) => {\n    const newNames = [...playerNames];\n    newNames[index] = name;\n    setPlayerNames(newNames);\n  };\n\n  const handleStartGame = () => {\n    const currentPlayer = JSON.parse(sessionStorage.getItem(\"currentPlayer\") || \"{}\");\n    const filledNames = playerNames.filter(name => name.trim());\n    \n    if (filledNames.length !== selectedPlayerCount) {\n      toast({\n        title: \"Missing player names\",\n        description: \"Please enter names for all players before starting the game.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check for duplicate names\n    const uniqueNames = new Set(filledNames.map(name => name.trim().toLowerCase()));\n    if (uniqueNames.size !== filledNames.length) {\n      toast({\n        title: \"Duplicate player names\",\n        description: \"Each player must have a unique name. Please update any duplicates.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if today is weekend (Saturday = 6, Sunday = 0)\n    const today = new Date();\n    const isWeekend = today.getDay() === 0 || today.getDay() === 6;\n\n    createGameMutation.mutate({\n      playerId: currentPlayer.id,\n      playerNames: filledNames,\n      playerCount: selectedPlayerCount,\n      isWeekend,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-golf-cream p-4\">\n      {createGameMutation.isPending && (\n        <GolfLoader text=\"Starting game\" size=\"lg\" overlay={true} />\n      )}\n      <div className=\"max-w-md mx-auto pt-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"text-4xl mb-2\">👥</div>\n          <h2 className=\"text-2xl font-bold text-golf-dark\">Player Setup</h2>\n          <p className=\"text-golf-dark opacity-75\">How many players today?</p>\n        </div>\n        \n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between text-sm text-golf-dark mb-2\">\n            <span>Step 2 of 3</span>\n            <span>67%</span>\n          </div>\n          <Progress value={67} className=\"h-2\" />\n        </div>\n        \n        {/* Player Count Selection */}\n        <Card className=\"shadow-lg mb-6\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-golf-dark mb-4\">Number of Players</h3>\n            <div className=\"grid grid-cols-4 gap-3\">\n              {Array.from({ length: 8 }, (_, i) => i + 1).map(num => (\n                <Button\n                  key={num}\n                  variant={selectedPlayerCount === num ? \"default\" : \"outline\"}\n                  className={`py-3 font-bold transition-all duration-200 ${\n                    selectedPlayerCount === num \n                      ? \"bg-golf-green text-white hover:bg-golf-light\" \n                      : \"border-2 border-gray-200 hover:border-golf-green hover:bg-golf-green hover:text-white\"\n                  }`}\n                  onClick={() => handlePlayerCountSelect(num)}\n                >\n                  {num}\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Player Names */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-golf-dark mb-4\">Player Names</h3>\n            <div className=\"space-y-4\">\n              {Array.from({ length: selectedPlayerCount }, (_, i) => (\n                <div key={i} className=\"relative\">\n                  <div className=\"absolute left-3 top-3 w-6 h-6 bg-golf-green text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                    {i + 1}\n                  </div>\n                  <Input\n                    placeholder={`Player ${i + 1} name`}\n                    value={playerNames[i] || \"\"}\n                    onChange={(e) => handlePlayerNameChange(i, e.target.value)}\n                    className=\"pl-12 pr-4 py-3 border-2 border-gray-200 focus:border-golf-green\"\n                  />\n                </div>\n              ))}\n            </div>\n            \n            <Button \n              onClick={handleStartGame}\n              disabled={createGameMutation.isPending}\n              className=\"w-full bg-golf-green hover:bg-golf-light text-white font-bold py-3 mt-6\"\n            >\n              {createGameMutation.isPending ? \"Starting Game...\" : \"Start Playing\"}\n              <Play className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6690},"client/src/pages/pricing.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport AdminSidebar from \"@/components/admin-sidebar\";\nimport { Calendar, CalendarDays, Save, RotateCcw, Calculator, LogOut } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertPricingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport GolfLoader from \"@/components/golf-loader\";\n\nconst pricingFormSchema = insertPricingSchema.omit({ updatedBy: true });\ntype PricingForm = z.infer<typeof pricingFormSchema>;\n\nexport default function Pricing() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const handleLogout = () => {\n    fetch(\"/api/admin/logout\", { method: \"POST\" })\n      .then(() => {\n        queryClient.clear();\n        navigate(\"/admin\");\n        toast({\n          title: \"Logged out successfully\",\n          description: \"You have been logged out of the admin panel.\",\n        });\n      })\n      .catch(() => {\n        toast({\n          title: \"Logout failed\",\n          description: \"There was an error logging out.\",\n          variant: \"destructive\",\n        });\n      });\n  };\n\n  // Check authentication\n  const { data: user, isLoading: userLoading, error } = useQuery({\n    queryKey: [\"/api/admin/me\"],\n    retry: false,\n  });\n\n  const { data: currentPricing, isLoading: pricingLoading } = useQuery({\n    queryKey: [\"/api/pricing\"],\n    enabled: !!user,\n  });\n\n  const { data: pricingHistory, isLoading: historyLoading } = useQuery({\n    queryKey: [\"/api/admin/pricing-history\"],\n    enabled: !!user,\n  });\n\n  const form = useForm<PricingForm>({\n    resolver: zodResolver(pricingFormSchema),\n    defaultValues: {\n      weekdayPrice: \"60.00\",\n      weekendPrice: \"80.00\",\n    },\n  });\n\n  useEffect(() => {\n    if (error && !userLoading) {\n      navigate(\"/admin\");\n    }\n  }, [error, userLoading, navigate]);\n\n  useEffect(() => {\n    if (currentPricing && typeof currentPricing === 'object' && 'weekdayPrice' in currentPricing) {\n      form.reset({\n        weekdayPrice: (currentPricing as any).weekdayPrice,\n        weekendPrice: (currentPricing as any).weekendPrice,\n      });\n    }\n  }, [currentPricing, form]);\n\n  const updatePricingMutation = useMutation({\n    mutationFn: (data: PricingForm) => apiRequest(\"POST\", \"/api/admin/pricing\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pricing\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pricing-history\"] });\n      toast({\n        title: \"Pricing updated successfully\",\n        description: \"The new pricing has been saved and is now active.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update pricing\",\n        description: \"There was an error updating the pricing. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PricingForm) => {\n    updatePricingMutation.mutate(data);\n  };\n\n  const handleReset = () => {\n    if (currentPricing && typeof currentPricing === 'object' && 'weekdayPrice' in currentPricing) {\n      form.reset({\n        weekdayPrice: (currentPricing as any).weekdayPrice,\n        weekendPrice: (currentPricing as any).weekendPrice,\n      });\n    }\n  };\n\n  if (userLoading) {\n    return <GolfLoader text=\"Loading admin panel\" size=\"lg\" overlay={true} />;\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  // Calculate estimated revenue impact\n  const weekdayPrice = parseFloat(form.watch(\"weekdayPrice\") || \"0\");\n  const weekendPrice = parseFloat(form.watch(\"weekendPrice\") || \"0\");\n  const avgGamesPerDay = 24; // Estimated\n  const avgPlayersPerGame = 3; // Estimated\n  const monthlyRevenue = ((weekdayPrice * 22) + (weekendPrice * 8)) * avgGamesPerDay * avgPlayersPerGame;\n  const currentMonthlyRevenue = currentPricing && typeof currentPricing === 'object' && 'weekdayPrice' in currentPricing\n    ? ((parseFloat((currentPricing as any).weekdayPrice) * 22) + (parseFloat((currentPricing as any).weekendPrice) * 8)) * avgGamesPerDay * avgPlayersPerGame\n    : 0;\n  const increaseImpact = monthlyRevenue - currentMonthlyRevenue;\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <AdminSidebar />\n      \n      {/* Main Content */}\n      <div className=\"md:ml-64 flex flex-col\">\n        {/* Header */}\n        <div className=\"bg-white shadow-sm border-b px-4 md:px-8 py-4 pt-16 md:pt-4\">\n          <div className=\"flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n            <div>\n              <h1 className=\"text-xl md:text-2xl font-bold text-gray-800\">Pricing Management</h1>\n              <p className=\"text-sm md:text-base text-gray-600\">Set and manage player pricing for different days</p>\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={handleLogout}\n              className=\"flex items-center gap-2 text-gray-600 hover:text-golf-green self-start md:self-auto\"\n              size=\"sm\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"p-4 md:p-8\">\n        \n        {/* Current Pricing Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n          {/* Weekday Pricing */}\n          <Card className=\"shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Weekday Pricing</h3>\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Calendar className=\"h-5 w-5 text-blue-600\" />\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-golf-green mb-2\">\n                  {pricingLoading ? \"...\" : `₹${currentPricing && typeof currentPricing === 'object' && 'weekdayPrice' in currentPricing ? (currentPricing as any).weekdayPrice : \"60.00\"}`}\n                </div>\n                <p className=\"text-gray-600\">Per Player</p>\n              </div>\n              <div className=\"mt-4 text-sm text-gray-600\">\n                <p><strong>Days:</strong> Monday - Friday</p>\n                <p><strong>Last Updated:</strong> {\n                  currentPricing && typeof currentPricing === 'object' && 'updatedAt' in currentPricing ? new Date((currentPricing as any).updatedAt).toLocaleDateString() : \"Not set\"\n                }</p>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Weekend Pricing */}\n          <Card className=\"shadow-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Weekend Pricing</h3>\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\n                  <CalendarDays className=\"h-5 w-5 text-orange-600\" />\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-golf-green mb-2\">\n                  {pricingLoading ? \"...\" : `₹${currentPricing && typeof currentPricing === 'object' && 'weekendPrice' in currentPricing ? (currentPricing as any).weekendPrice : \"80.00\"}`}\n                </div>\n                <p className=\"text-gray-600\">Per Player</p>\n              </div>\n              <div className=\"mt-4 text-sm text-gray-600\">\n                <p><strong>Days:</strong> Saturday - Sunday</p>\n                <p><strong>Last Updated:</strong> {\n                  currentPricing && typeof currentPricing === 'object' && 'updatedAt' in currentPricing ? new Date((currentPricing as any).updatedAt).toLocaleDateString() : \"Not set\"\n                }</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Pricing Update Form */}\n        <Card className=\"shadow-md mb-8\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-6\">Update Pricing</h3>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"weekdayPrice\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 font-medium flex items-center\">\n                        <Calendar className=\"mr-2 h-4 w-4 text-blue-600\" />\n                        Weekday Price (Per Player)\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <span className=\"absolute left-3 top-3 text-gray-500\">₹</span>\n                          <Input \n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"60.00\"\n                            className=\"pl-8 pr-4 border-2 border-gray-200 focus:border-golf-green\"\n                            {...field}\n                          />\n                        </div>\n                      </FormControl>\n                      <p className=\"text-sm text-gray-600\">Monday through Friday pricing</p>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"weekendPrice\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 font-medium flex items-center\">\n                        <CalendarDays className=\"mr-2 h-4 w-4 text-orange-600\" />\n                        Weekend Price (Per Player)\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <span className=\"absolute left-3 top-3 text-gray-500\">₹</span>\n                          <Input \n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"80.00\"\n                            className=\"pl-8 pr-4 border-2 border-gray-200 focus:border-golf-green\"\n                            {...field}\n                          />\n                        </div>\n                      </FormControl>\n                      <p className=\"text-sm text-gray-600\">Saturday and Sunday pricing</p>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </form>\n            </Form>\n            \n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-4 mt-6\">\n              <Button \n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleReset}\n                className=\"px-6 py-2\"\n              >\n                <RotateCcw className=\"mr-2 h-4 w-4\" />\n                Reset\n              </Button>\n              <Button \n                onClick={form.handleSubmit(onSubmit)}\n                disabled={updatePricingMutation.isPending}\n                className=\"px-6 py-2 bg-golf-green text-white hover:bg-golf-light\"\n              >\n                <Save className=\"mr-2 h-4 w-4\" />\n                {updatePricingMutation.isPending ? \"Updating...\" : \"Update Pricing\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Pricing History */}\n        <Card className=\"shadow-md mb-8\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-6\">Pricing History</h3>\n            \n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Weekday Price</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Weekend Price</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Updated By</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {historyLoading ? (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-4 text-center\">\n                        <div className=\"flex justify-center py-4\">\n                          <GolfLoader text=\"Loading history\" size=\"sm\" />\n                        </div>\n                      </td>\n                    </tr>\n                  ) : pricingHistory && Array.isArray(pricingHistory) && pricingHistory.length > 0 ? (\n                    pricingHistory.map((entry: any, index: number) => (\n                      <tr key={entry.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {new Date(entry.updatedAt).toLocaleDateString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-golf-green\">\n                          ₹{entry.weekdayPrice}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-golf-green\">\n                          ₹{entry.weekendPrice}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          Admin User\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className={`px-2 py-1 text-xs font-semibold rounded-full ${\n                            index === 0 \n                              ? \"bg-green-100 text-green-800\" \n                              : \"bg-gray-100 text-gray-800\"\n                          }`}>\n                            {index === 0 ? \"Current\" : \"Previous\"}\n                          </span>\n                        </td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-4 text-center text-gray-500\">No pricing history available</td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n        \n\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15551},"client/src/pages/registration.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertPlayerSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { ArrowRight, FileText } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport GolfLoader from \"@/components/golf-loader\";\n\nconst registrationSchema = insertPlayerSchema.extend({\n  consent: z.boolean().refine(val => val === true, {\n    message: \"You must agree to the terms and conditions\",\n  }),\n});\n\ntype RegistrationForm = z.infer<typeof registrationSchema>;\n\nexport default function Registration() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  // Function to save form data to sessionStorage\n  const saveFormData = (data: Partial<RegistrationForm>) => {\n    sessionStorage.setItem(\"registrationFormData\", JSON.stringify(data));\n  };\n\n  // Function to load form data from sessionStorage\n  const loadFormData = (): Partial<RegistrationForm> => {\n    try {\n      const saved = sessionStorage.getItem(\"registrationFormData\");\n      return saved ? JSON.parse(saved) : {};\n    } catch {\n      return {};\n    }\n  };\n\n  const form = useForm<RegistrationForm>({\n    resolver: zodResolver(registrationSchema),\n    defaultValues: {\n      name: \"\",\n      contact: \"\",\n      email: \"\",\n      consent: false,\n    },\n  });\n\n  // Load saved form data when component mounts\n  useEffect(() => {\n    const savedData = loadFormData();\n    if (savedData) {\n      form.reset({\n        name: savedData.name || \"\",\n        contact: savedData.contact || \"\",\n        email: savedData.email || \"\",\n        consent: savedData.consent || false,\n      });\n    }\n  }, [form]);\n\n  // Also check for updates when component becomes visible (user returns from terms)\n  useEffect(() => {\n    const handleFocus = () => {\n      const savedData = loadFormData();\n      if (savedData && typeof savedData.consent !== 'undefined') {\n        form.setValue('consent', savedData.consent);\n      }\n    };\n    \n    window.addEventListener('focus', handleFocus);\n    // Also run when component mounts/becomes visible\n    handleFocus();\n    \n    return () => window.removeEventListener('focus', handleFocus);\n  }, [form]);\n\n  // Save form data when values change\n  useEffect(() => {\n    const subscription = form.watch((value) => {\n      saveFormData(value);\n    });\n    return () => subscription.unsubscribe();\n  }, [form]);\n\n  const handleTermsClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    // Save current form data before navigating\n    saveFormData(form.getValues());\n    navigate(\"/terms\");\n  };\n\n  const registerMutation = useMutation({\n    mutationFn: (data: Omit<RegistrationForm, \"consent\">) => \n      apiRequest(\"POST\", \"/api/players\", data),\n    onSuccess: async (response) => {\n      const player = await response.json();\n      // Store player data in sessionStorage for next steps\n      sessionStorage.setItem(\"currentPlayer\", JSON.stringify(player));\n      navigate(\"/players\");\n    },\n    onError: () => {\n      toast({\n        title: \"Registration failed\",\n        description: \"There was an error creating your account. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegistrationForm) => {\n    const { consent, ...playerData } = data;\n    // Clear saved form data on successful submission\n    sessionStorage.removeItem(\"registrationFormData\");\n    registerMutation.mutate(playerData);\n  };\n\n  const handleCancel = () => {\n    // Reset form data\n    form.reset({\n      name: \"\",\n      contact: \"\",\n      email: \"\",\n      consent: false,\n    });\n    // Clear saved form data\n    sessionStorage.removeItem(\"registrationFormData\");\n    // Navigate back to landing page\n    navigate(\"/\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-golf-cream p-4\">\n      {registerMutation.isPending && (\n        <GolfLoader text=\"Registering player\" size=\"lg\" overlay={true} />\n      )}\n      <div className=\"max-w-md mx-auto pt-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"text-4xl mb-2\">📝</div>\n          <h2 className=\"text-2xl font-bold text-golf-dark\">Player Registration</h2>\n          <p className=\"text-golf-dark opacity-75\">Let's get to know you!</p>\n        </div>\n        \n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between text-sm text-golf-dark mb-2\">\n            <span>Step 1 of 3</span>\n            <span>33%</span>\n          </div>\n          <Progress value={33} className=\"h-2\" />\n        </div>\n        \n        {/* Registration Form */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-golf-dark font-medium\">Full Name *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter your full name\" \n                          className=\"border-2 border-gray-200 focus:border-golf-green\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"contact\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-golf-dark font-medium\">Contact Number *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"+91 9876543210\" \n                          className=\"border-2 border-gray-200 focus:border-golf-green\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-golf-dark font-medium\">Email Address *</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\"\n                          placeholder=\"your.email@example.com\" \n                          className=\"border-2 border-gray-200 focus:border-golf-green\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"consent\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox \n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel className=\"text-sm text-golf-dark\">\n                          I agree to the{\" \"}\n                          <button \n                            type=\"button\"\n                            onClick={handleTermsClick}\n                            className=\"text-golf-green underline hover:text-golf-light transition-colors inline-flex items-center gap-1\"\n                            data-testid=\"link-terms\"\n                          >\n                            <FileText className=\"h-3 w-3\" />\n                            Terms & Conditions\n                          </button>\n                          {\" \"}and consent to receive updates about my game.\n                        </FormLabel>\n                        <FormMessage />\n                      </div>\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-golf-green hover:bg-golf-light text-white font-bold py-3\"\n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-continue\"\n                >\n                  {registerMutation.isPending ? \"Registering...\" : \"Continue to Player Setup\"}\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n                \n                <Button \n                  type=\"button\"\n                  onClick={handleCancel}\n                  variant=\"outline\"\n                  className=\"w-full border-2 border-gray-300 text-gray-600 font-medium py-3 hover:bg-gray-50 mt-3\"\n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10028},"client/src/pages/results.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Share, RotateCcw, Trophy, Medal, Award } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface PlayerScore {\n  name: string;\n  totalScore: number;\n  scores: { [hole: number]: number };\n}\n\nexport default function Results() {\n  const { gameId } = useParams();\n  const [, navigate] = useLocation();\n  const [playerScores, setPlayerScores] = useState<PlayerScore[]>([]);\n\n  const { data: gameData, isLoading } = useQuery({\n    queryKey: [\"/api/games\", gameId],\n  });\n\n  useEffect(() => {\n    if (gameData) {\n      // Calculate total scores for each player\n      const scoresByPlayer: { [playerName: string]: { [hole: number]: number } } = {};\n      \n      gameData.scores?.forEach((score: any) => {\n        if (!scoresByPlayer[score.playerName]) {\n          scoresByPlayer[score.playerName] = {};\n        }\n        scoresByPlayer[score.playerName][score.hole] = score.strokes;\n      });\n\n      const players: PlayerScore[] = Object.keys(scoresByPlayer).map(playerName => {\n        const scores = scoresByPlayer[playerName];\n        const totalScore = Object.values(scores).reduce((sum: number, strokes: number) => sum + strokes, 0);\n        \n        return {\n          name: playerName,\n          totalScore,\n          scores,\n        };\n      });\n\n      // Sort by total score (lowest first)\n      players.sort((a, b) => a.totalScore - b.totalScore);\n      setPlayerScores(players);\n    }\n  }, [gameData]);\n\n  const getRankIcon = (index: number) => {\n    switch (index) {\n      case 0: return \"🥇\";\n      case 1: return \"🥈\";\n      case 2: return \"🥉\";\n      default: return index + 1;\n    }\n  };\n\n  const handleShare = () => {\n    if (navigator.share) {\n      navigator.share({\n        title: \"My Mini Golf Results\",\n        text: `I just played mini golf at Madras Mini Golf! Check out my scores!`,\n        url: window.location.href,\n      });\n    } else {\n      // Fallback - copy to clipboard\n      navigator.clipboard.writeText(window.location.href);\n      alert(\"Results link copied to clipboard!\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-golf-cream flex items-center justify-center\">\n        <div>Loading results...</div>\n      </div>\n    );\n  }\n\n  if (!gameData) {\n    return (\n      <div className=\"min-h-screen bg-golf-cream flex items-center justify-center\">\n        <div>Game not found</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-golf-cream p-4\">\n      <div className=\"max-w-md mx-auto pt-8\">\n        {/* Header */}\n        <motion.div \n          className=\"text-center mb-8\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <div className=\"text-6xl mb-4\">🏆</div>\n          <h2 className=\"text-3xl font-bold text-golf-dark\">Game Complete!</h2>\n          <p className=\"text-golf-dark opacity-75\">Congratulations on a great game</p>\n        </motion.div>\n        \n        {/* Final Scores */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2, duration: 0.6 }}\n        >\n          <Card className=\"shadow-lg mb-6\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-bold text-golf-dark mb-4 text-center\">Final Scores</h3>\n              \n              {playerScores.map((player, index) => (\n                <motion.div \n                  key={player.name}\n                  className=\"flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0\"\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: 0.3 + index * 0.1, duration: 0.4 }}\n                >\n                  <div className=\"flex items-center\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold mr-3 text-sm ${\n                      index === 0 ? \"bg-yellow-500 text-white\" :\n                      index === 1 ? \"bg-gray-400 text-white\" :\n                      index === 2 ? \"bg-amber-600 text-white\" :\n                      \"bg-gray-300 text-gray-600\"\n                    }`}>\n                      {getRankIcon(index)}\n                    </div>\n                    <span className=\"font-semibold text-golf-dark\">{player.name}</span>\n                  </div>\n                  <div className=\"bg-golf-green rounded-lg px-4 py-2 shadow-md\">\n                    <span className=\"text-xl font-bold text-white\">{player.totalScore}</span>\n                  </div>\n                </motion.div>\n              ))}\n            </CardContent>\n          </Card>\n        </motion.div>\n        \n        {/* Game Summary */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n        >\n          <Card className=\"shadow-lg mb-6\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-bold text-golf-dark mb-4\">Game Summary</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-golf-dark\">Players:</span>\n                  <span className=\"font-semibold\">{playerScores.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-golf-dark\">Date:</span>\n                  <span className=\"font-semibold\">\n                    {gameData.completedAt ? new Date(gameData.completedAt).toLocaleDateString() : new Date().toLocaleDateString()}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-golf-dark\">Time:</span>\n                  <span className=\"font-semibold\">\n                    {gameData.completedAt ? new Date(gameData.completedAt).toLocaleTimeString('en-US', { \n                      hour: 'numeric', \n                      minute: '2-digit', \n                      hour12: true \n                    }) : new Date().toLocaleTimeString('en-US', { \n                      hour: 'numeric', \n                      minute: '2-digit', \n                      hour12: true \n                    })}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n        \n        {/* Action Buttons */}\n        <motion.div \n          className=\"space-y-4\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.6 }}\n        >\n          <Button \n            onClick={handleShare}\n            className=\"w-full bg-golf-green hover:bg-golf-light text-white font-bold py-3\"\n          >\n            <Share className=\"mr-2 h-4 w-4\" />\n            Share Results\n          </Button>\n          <Button \n            onClick={() => navigate(\"/\")}\n            variant=\"outline\"\n            className=\"w-full border-2 border-golf-green text-golf-dark font-bold py-3 hover:bg-gray-50\"\n          >\n            <RotateCcw className=\"mr-2 h-4 w-4\" />\n            Play Again\n          </Button>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7540},"client/src/pages/sales.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport GolfLoader from \"@/components/golf-loader\";\nimport AdminSidebar from \"@/components/admin-sidebar\";\nimport { Download, LogOut, TrendingUp, BarChart3 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Sales() {\n  const [, navigate] = useLocation();\n  const [selectedPeriod, setSelectedPeriod] = useState<\"today\" | \"week\" | \"month\">(\"today\");\n  const [chartType, setChartType] = useState<\"line\" | \"bar\">(\"line\");\n\n  // Check authentication\n  const { data: user, isLoading: userLoading, error } = useQuery({\n    queryKey: [\"/api/admin/me\"],\n    retry: false,\n  });\n\n  const { data: salesData, isLoading: salesLoading } = useQuery({\n    queryKey: [\"/api/admin/sales\", selectedPeriod === \"today\" ? \"day\" : selectedPeriod],\n    enabled: !!user,\n  });\n\n  const { data: hourlyData, isLoading: hourlyLoading } = useQuery({\n    queryKey: [\"/api/admin/hourly-sales\"],\n    enabled: !!user && selectedPeriod === \"today\",\n  });\n\n  const { data: weeklyData, isLoading: weeklyLoading } = useQuery({\n    queryKey: [\"/api/admin/weekly-sales\"],\n    enabled: !!user && selectedPeriod === \"week\",\n  });\n\n  const { data: monthlyData, isLoading: monthlyLoading } = useQuery({\n    queryKey: [\"/api/admin/monthly-sales\"],\n    enabled: !!user && selectedPeriod === \"month\",\n  });\n\n  const { data: transactions, isLoading: transactionsLoading } = useQuery({\n    queryKey: [\"/api/admin/transactions\"],\n    enabled: !!user,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/admin/logout\"),\n    onSuccess: () => {\n      navigate(\"/admin\");\n    },\n  });\n\n  useEffect(() => {\n    if (error && !userLoading) {\n      navigate(\"/admin\");\n    }\n  }, [error, userLoading, navigate]);\n\n  if (userLoading) {\n    return <GolfLoader text=\"Loading sales data\" size=\"lg\" overlay={true} />;\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const handleExport = () => {\n    // Simple CSV export functionality\n    if (transactions && Array.isArray(transactions)) {\n      const csvContent = \"data:text/csv;charset=utf-8,\" \n        + \"Time,Player,Players,Cost,Type\\n\"\n        + transactions.map((t: any) => \n            `${t.time},${t.player},${t.playerCount},${t.cost},${t.type}`\n          ).join(\"\\n\");\n\n      const encodedUri = encodeURI(csvContent);\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"href\", encodedUri);\n      link.setAttribute(\"download\", `transactions_${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <AdminSidebar />\n      \n      {/* Main Content */}\n      <div className=\"md:ml-64 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-gray-200 px-4 md:px-8 py-4 pt-16 md:pt-4\">\n          <div className=\"flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n            <div>\n              <h1 className=\"text-xl md:text-2xl font-bold text-gray-800\">Sales Analytics</h1>\n              <p className=\"text-sm md:text-base text-gray-600\">Track your revenue and game performance</p>\n            </div>\n            <Button\n              onClick={() => logoutMutation.mutate()}\n              variant=\"outline\"\n              className=\"flex items-center gap-2 text-gray-600 hover:text-gray-800 self-start md:self-auto\"\n              disabled={logoutMutation.isPending}\n              size=\"sm\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n              {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"flex-1 p-4 md:p-8\">\n        \n        {/* Time Period Selector */}\n        <Card className=\"shadow-md p-4 md:p-6 mb-6 md:mb-8\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Select Time Period</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {[\"today\", \"week\", \"month\"].map((period) => (\n                <Button\n                  key={period}\n                  variant={selectedPeriod === period ? \"default\" : \"outline\"}\n                  className={selectedPeriod === period ? \"bg-golf-green text-white\" : \"\"}\n                  onClick={() => setSelectedPeriod(period as \"today\" | \"week\" | \"month\")}\n                  size=\"sm\"\n                >\n                  {period.charAt(0).toUpperCase() + period.slice(1)}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </Card>\n        \n        {/* Sales Summary */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"shadow-md\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">\n                {selectedPeriod === \"today\" ? \"Today's\" : selectedPeriod === \"week\" ? \"Weekly\" : \"Monthly\"} Summary\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Total Games:</span>\n                  <span className=\"font-bold text-golf-green\">\n                    {salesLoading ? \"...\" : (salesData as any)?.totalGames || 0}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Total Players:</span>\n                  <span className=\"font-bold text-golf-green\">\n                    {salesLoading ? \"...\" : (salesData as any)?.totalPlayers || 0}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Revenue:</span>\n                  <span className=\"font-bold text-golf-green\">\n                    {salesLoading ? \"...\" : (salesData as any)?.totalRevenue || \"₹0\"}\n                  </span>\n                </div>\n                <div className=\"flex justify-between border-t pt-4\">\n                  <span className=\"text-gray-600\">Avg per Game:</span>\n                  <span className=\"font-bold text-gray-800\">\n                    {salesLoading ? \"...\" : (salesData as any)?.avgPerGame || \"₹0\"}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Charts - Different for each period */}\n          <Card className=\"shadow-md lg:col-span-2\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">\n                  {selectedPeriod === \"today\" ? \"Hourly Revenue\" : \n                   selectedPeriod === \"week\" ? \"Daily Revenue (This Week)\" : \n                   \"Daily Revenue (This Month)\"}\n                </h3>\n                <div className=\"flex space-x-1 bg-gray-100 rounded-md p-1\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className={`h-8 px-3 ${chartType === \"line\" ? \"bg-white shadow-sm\" : \"\"}`}\n                    onClick={() => setChartType(\"line\")}\n                  >\n                    <TrendingUp className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className={`h-8 px-3 ${chartType === \"bar\" ? \"bg-white shadow-sm\" : \"\"}`}\n                    onClick={() => setChartType(\"bar\")}\n                  >\n                    <BarChart3 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              <div className=\"h-64\">\n                {(selectedPeriod === \"today\" && hourlyLoading) || \n                 (selectedPeriod === \"week\" && weeklyLoading) || \n                 (selectedPeriod === \"month\" && monthlyLoading) ? (\n                  <div className=\"flex items-center justify-center w-full h-full\">\n                    <GolfLoader text=\"Loading chart data\" size=\"md\" />\n                  </div>\n                ) : (() => {\n                  const currentData = selectedPeriod === \"today\" ? hourlyData : \n                                    selectedPeriod === \"week\" ? weeklyData : monthlyData;\n                  \n                  if (!currentData || !Array.isArray(currentData) || currentData.length === 0) {\n                    return (\n                      <div className=\"flex items-center justify-center w-full h-full text-gray-500\">\n                        No data available for {selectedPeriod}\n                      </div>\n                    );\n                  }\n\n                  // Transform data for chart\n                  const chartData = currentData.map((data: any) => {\n                    let revenue = 0;\n                    if (selectedPeriod === \"today\") {\n                      // For hourly data, revenue might include ₹ symbol\n                      const revenueStr = data.revenue || \"0\";\n                      revenue = parseFloat(revenueStr.toString().replace(/[₹,]/g, ''));\n                    } else {\n                      // For weekly/monthly data\n                      revenue = parseFloat(data.revenue || \"0\");\n                    }\n                    \n                    return {\n                      name: selectedPeriod === \"today\" ? \n                        data.label || `${data.hour}:00` : // Use label from API for today\n                        data.label || `Day ${data.day}`, // Date label for week/month\n                      revenue: revenue,\n                      displayRevenue: `₹${revenue.toLocaleString()}`\n                    };\n                  });\n                  \n\n                  \n                  return (\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      {chartType === \"line\" ? (\n                        <LineChart data={chartData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e0e7ff\" />\n                          <XAxis \n                            dataKey=\"name\" \n                            stroke=\"#6b7280\"\n                            fontSize={12}\n                          />\n                          <YAxis \n                            stroke=\"#6b7280\"\n                            fontSize={12}\n                            tickFormatter={(value) => `₹${value}`}\n                            domain={[0, 'dataMax']}\n                          />\n                          <Tooltip \n                            formatter={(value: any) => [`₹${value}`, 'Revenue']}\n                            labelStyle={{ color: '#374151' }}\n                            contentStyle={{ \n                              backgroundColor: '#f9fafb', \n                              border: '1px solid #e5e7eb',\n                              borderRadius: '6px'\n                            }}\n                          />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"revenue\" \n                            stroke=\"#16a34a\" \n                            strokeWidth={2}\n                            dot={{ fill: '#16a34a', strokeWidth: 2, r: 4 }}\n                            activeDot={{ r: 6, stroke: '#16a34a', strokeWidth: 2, fill: '#ffffff' }}\n                          />\n                        </LineChart>\n                      ) : (\n                        <BarChart data={chartData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e0e7ff\" />\n                          <XAxis \n                            dataKey=\"name\" \n                            stroke=\"#6b7280\"\n                            fontSize={12}\n                          />\n                          <YAxis \n                            stroke=\"#6b7280\"\n                            fontSize={12}\n                            tickFormatter={(value) => `₹${value}`}\n                            domain={[0, 'dataMax']}\n                          />\n                          <Tooltip \n                            formatter={(value: any) => [`₹${value}`, 'Revenue']}\n                            labelStyle={{ color: '#374151' }}\n                            contentStyle={{ \n                              backgroundColor: '#f9fafb', \n                              border: '1px solid #e5e7eb',\n                              borderRadius: '6px'\n                            }}\n                          />\n                          <Bar \n                            dataKey=\"revenue\" \n                            fill=\"#16a34a\"\n                            radius={[4, 4, 0, 0]}\n                          />\n                        </BarChart>\n                      )}\n                    </ResponsiveContainer>\n                  );\n                })()}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Detailed Transaction List */}\n        <Card className=\"shadow-md\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-800\">Today's Transactions</h3>\n              <Button \n                onClick={handleExport}\n                className=\"bg-golf-green text-white hover:bg-golf-light\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Export\n              </Button>\n            </div>\n            \n            {/* Transaction Table */}\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Time</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Player</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Players</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Cost</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Type</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {transactionsLoading ? (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-4 text-center\">Loading...</td>\n                    </tr>\n                  ) : transactions && Array.isArray(transactions) && transactions.length > 0 ? (\n                    transactions.map((transaction: any, index: number) => (\n                      <tr key={index} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{transaction.time}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">{transaction.player}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{transaction.playerCount}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-golf-green\">{transaction.cost}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className={`px-2 py-1 text-xs font-semibold rounded-full ${\n                            transaction.type === \"Weekend\" \n                              ? \"bg-blue-100 text-blue-800\" \n                              : \"bg-green-100 text-green-800\"\n                          }`}>\n                            {transaction.type}\n                          </span>\n                        </td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-4 text-center text-gray-500\">No transactions today</td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16790},"client/src/pages/terms-and-conditions.tsx":{"content":"import { ArrowLeft, Gavel } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useLocation } from \"wouter\";\n\nexport default function TermsAndConditions() {\n  const [, setLocation] = useLocation();\n\n  const handleBack = () => {\n    // Navigate back without checking the checkbox\n    setLocation(\"/registration\");\n  };\n\n  const handleAccept = () => {\n    // Set checkbox to checked when accepting terms\n    const savedData = JSON.parse(sessionStorage.getItem(\"registrationFormData\") || \"{}\");\n    savedData.consent = true;\n    sessionStorage.setItem(\"registrationFormData\", JSON.stringify(savedData));\n    setLocation(\"/registration\");\n  };\n\n  const termsContent = {\n    title: \"MADRAS MINI GOLF – TERMS, CONDITIONS, RULES, AND PARTICIPATION AGREEMENT\",\n    introduction: `This document (\"Agreement\") governs the use of the Madras Mini Golf facility, equipment, and services, located at:\n\nShop No. T-53/B, 4th, Besant Ave Rd, Tiruvalluvar Nagar, Adyar, Chennai, Tamil Nadu 600020\n\nBy purchasing an entry ticket, participating in any game, remaining on the premises, or otherwise engaging with Madras Mini Golf, you (\"the Participant\") confirm that you have read, understood, and accepted all terms, conditions, disclaimers, notices, and policies stated herein.\n\nIf you do not agree, you must not enter the premises or participate in the game.`,\n    sections: [\n      {\n        number: \"1\",\n        title: \"DEFINITIONS\",\n        content: `For the purposes of this Agreement:\n1.1 \"Facility\" means the Madras Mini Golf venue, including indoor/outdoor areas, waiting zones, restrooms, and any space where activities or related services take place.\n1.2 \"Game\" means the miniature golf activity, inclusive of all obstacles, ramps, putting greens, balls, clubs, and accessories provided by the Operator.\n1.3 \"Operator\" refers to Madras Mini Golf and its owners, managers, employees, representatives, and agents.`\n      },\n      {\n        number: \"2\",\n        title: \"GENERAL CONDUCT AND BEHAVIOUR\",\n        content: `2.1 Participants must follow all instructions provided verbally, in writing, or via signage by the Operator's staff.\n2.2 The Operator reserves the right to refuse entry, suspend participation, or remove any individual from the Facility without refund if they:\n        •       Engage in behavior that is unsafe, disrespectful, or disruptive.\n        •       Damage property intentionally or through negligence.\n        •       Fail to comply with these Terms.\n2.3 Alcohol, smoking, vaping, illegal substances, or dangerous objects are strictly prohibited.`\n      },\n      {\n        number: \"3\",\n        title: \"PARTICIPATION REQUIREMENTS\",\n        content: `3.1 All Participants acknowledge that miniature golf involves walking, bending, swinging a club, and being in proximity to moving balls, and accept the associated risks.\n3.2 Children under 12 years old must be supervised by a responsible adult at all times.\n3.3 The game is not recommended for individuals with medical conditions that may be aggravated by mild physical activity.`\n      },\n      {\n        number: \"4\",\n        title: \"EQUIPMENT USAGE\",\n        content: `4.1 All equipment remains the property of the Operator.\n4.2 Clubs must be held securely and swung below knee height unless otherwise instructed.\n4.3 Lost or damaged equipment may incur a replacement fee at the Operator's discretion.`\n      },\n      {\n        number: \"5\",\n        title: \"GAME RULES\",\n        content: `5.1 The game consists of a set number of holes, each with its own par score and layout.\n5.2 Only one Participant may take a shot at a time.\n5.3 Maximum six (6) strokes per hole.\n5.4 If the ball leaves the playing area, it must be replaced at the start point with a one-stroke penalty.`\n      },\n      {\n        number: \"6\",\n        title: \"SAFETY WAIVER AND LIABILITY RELEASE\",\n        content: `6.1 Participation is entirely at the Participant's own risk.\n6.2 The Operator is not liable for:\n        •       Any injury, accident, illness, or death occurring during or after participation, except where directly caused by proven negligence.\n        •       Loss or theft of personal property.\n6.3 By accepting these Terms, the Participant waives the right to bring legal action against the Operator for any injury, damage, or loss incurred during participation, except as required under Indian law.`\n      },\n      {\n        number: \"7\",\n        title: \"PHOTOGRAPHY AND MEDIA CONSENT\",\n        content: `7.1 The Operator may take photographs, videos, or other recordings of Participants for promotional use.\n7.2 If you do not consent, you must notify staff before entering the game area.`\n      },\n      {\n        number: \"8\",\n        title: \"REFUND POLICY\",\n        content: `8.1 All sales are final. No refunds will be issued for non-use of tickets, early departure, or dissatisfaction with the game.\n8.2 If the game is canceled by the Operator due to safety, maintenance, or events beyond control, Participants may be offered a rescheduled session at no additional cost.`\n      },\n      {\n        number: \"9\",\n        title: \"FORCE MAJEURE\",\n        content: `The Operator is not responsible for interruptions caused by events beyond its control, including but not limited to natural disasters, power failures, governmental restrictions, or strikes.`\n      },\n      {\n        number: \"10\",\n        title: \"GOVERNING LAW AND DISPUTES\",\n        content: `10.1 These Terms are governed by the laws of India.\n10.2 Any dispute shall be subject to the exclusive jurisdiction of the courts in Chennai, Tamil Nadu.`\n      },\n      {\n        number: \"11\",\n        title: \"ACCEPTANCE OF TERMS\",\n        content: `By entering, you acknowledge that:\n        •       You have read and understood these Terms in full.\n        •       You voluntarily accept all risks associated with participation.\n        •       You release Madras Mini Golf from liability to the fullest extent permitted by law.`\n      }\n    ]\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-white to-amber-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleBack}\n            className=\"flex items-center gap-2 hover:bg-green-50\"\n            data-testid=\"button-back-top\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back\n          </Button>\n        </div>\n\n        {/* Main Content */}\n        <Card className=\"border-green-200 shadow-xl overflow-hidden\">\n          <CardHeader className=\"bg-gradient-to-r from-green-600 via-green-700 to-green-600 text-white relative overflow-hidden\">\n            {/* Background Pattern */}\n            <div className=\"absolute inset-0 opacity-10\">\n              <div className=\"absolute top-0 left-0 w-20 h-20 border-2 border-white rounded-full\"></div>\n              <div className=\"absolute top-4 right-8 w-12 h-12 border-2 border-white rounded-full\"></div>\n              <div className=\"absolute bottom-2 left-16 w-8 h-8 border-2 border-white rounded-full\"></div>\n            </div>\n            \n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-white/10 rounded-full backdrop-blur-sm\">\n                  <Gavel className=\"h-6 w-6\" />\n                </div>\n                <CardTitle className=\"text-2xl font-bold\">Terms, Conditions & Rules</CardTitle>\n              </div>\n              <p className=\"text-green-100 text-sm mt-3 font-medium\">\n                📍 Madras Mini Golf | Please read carefully before participating\n              </p>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-6 space-y-6\">\n            {/* Introduction */}\n            <div className=\"prose max-w-none\">\n              <div className=\"whitespace-pre-line text-sm text-gray-700 leading-relaxed bg-gray-50 p-4 rounded-lg border\">\n                {termsContent.introduction}\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Terms Sections */}\n            <div className=\"space-y-6\">\n              {termsContent.sections.map((section, index) => (\n                <div key={index} className=\"border-l-4 border-l-green-500 pl-4\">\n                  <h3 className=\"font-bold text-lg text-gray-800 mb-3\">\n                    {section.number}. {section.title}\n                  </h3>\n                  <div className=\"whitespace-pre-line text-sm text-gray-700 leading-relaxed bg-white p-4 rounded border border-gray-200\">\n                    {section.content}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-3 justify-center pt-4\">\n              <Button\n                onClick={handleBack}\n                variant=\"outline\"\n                className=\"border-green-600 text-green-600 hover:bg-green-50 px-6 py-2\"\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back\n              </Button>\n              <Button\n                onClick={handleAccept}\n                className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-2\"\n                data-testid=\"button-accept\"\n              >\n                Accept\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9742},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}